#ifndef PVZ_ENUMS_H
#define PVZ_ENUMS_H

#include "MagicAddr.h"

#include <jni.h>

enum AdviceType {
    ADVICE_NONE = -1,
    ADVICE_CLICK_ON_SUN = 0,
    ADVICE_CLICKED_ON_SUN = 1,
    ADVICE_CLICKED_ON_COIN = 2,
    ADVICE_SEED_REFRESH = 3,
    ADVICE_CANT_AFFORD_PLANT = 4,
    ADVICE_PLANT_GRAVEBUSTERS_ON_GRAVES = 5,
    ADVICE_PLANT_LILYPAD_ON_WATER = 6,
    ADVICE_PLANT_TANGLEKELP_ON_WATER = 7,
    ADVICE_PLANT_SEASHROOM_ON_WATER = 8,
    ADVICE_PLANT_POTATOE_MINE_ON_LILY = 9,
    ADVICE_PLANT_WRONG_ART_TYPE = 10,
    ADVICE_PLANT_NEED_POT = 11,
    ADVICE_PLANT_NOT_ON_GRAVE = 12,
    ADVICE_PLANT_NOT_ON_CRATER = 13,
    ADVICE_CANT_PLANT_THERE = 14,
    ADVICE_PLANT_NOT_ON_WATER = 15,
    ADVICE_PLANTING_NEEDS_GROUND = 16,
    ADVICE_BEGHOULED_DRAG_TO_MATCH_3 = 17,
    ADVICE_BEGHOULED_MATCH_3 = 18,
    ADVICE_BEGHOULED_MATCH_4 = 19,
    ADVICE_BEGHOULED_SAVE_SUN = 20,
    ADVICE_BEGHOULED_USE_CRATER_1 = 21,
    ADVICE_BEGHOULED_USE_CRATER_2 = 22,
    ADVICE_PLANT_NOT_PASSED_LINE = 23,
    ADVICE_PLANT_ONLY_ON_REPEATERS = 24,
    ADVICE_PLANT_ONLY_ON_MELONPULT = 25,
    ADVICE_PLANT_ONLY_ON_SUNFLOWER = 26,
    ADVICE_PLANT_ONLY_ON_SPIKEWEED = 27,
    ADVICE_PLANT_ONLY_ON_KERNELPULT = 28,
    ADVICE_PLANT_ONLY_ON_MAGNETSHROOM = 29,
    ADVICE_PLANT_ONLY_ON_FUMESHROOM = 30,
    ADVICE_PLANT_ONLY_ON_LILYPAD = 31,
    ADVICE_PLANT_NEEDS_REPEATER = 32,
    ADVICE_PLANT_NEEDS_MELONPULT = 33,
    ADVICE_PLANT_NEEDS_SUNFLOWER = 34,
    ADVICE_PLANT_NEEDS_SPIKEWEED = 35,
    ADVICE_PLANT_NEEDS_KERNELPULT = 36,
    ADVICE_PLANT_NEEDS_MAGNETSHROOM = 37,
    ADVICE_PLANT_NEEDS_FUMESHROOM = 38,
    ADVICE_PLANT_NEEDS_LILYPAD = 39,
    ADVICE_SLOT_MACHINE_PULL = 40,
    ADVICE_HUGE_WAVE = 41,
    ADVICE_SHOVEL_REFRESH = 42,
    ADVICE_PORTAL_RELOCATING = 43,
    ADVICE_SLOT_MACHINE_COLLECT_SUN = 44,
    ADVICE_DESTORY_POTS_TO_FINISIH_LEVEL = 45,
    ADVICE_USE_SHOVEL_ON_POTS = 46,
    ADVICE_ALMOST_THERE = 47,
    ADVICE_ZOMBIQUARIUM_CLICK_TROPHY = 48,
    ADVICE_ZOMBIQUARIUM_COLLECT_SUN = 49,
    ADVICE_ZOMBIQUARIUM_CLICK_TO_FEED,
    ADVICE_ZOMBIQUARIUM_BUY_SNORKEL,
    ADVICE_I_ZOMBIE_PLANTS_NOT_REAL,
    ADVICE_I_ZOMBIE_NOT_PASSED_LINE,
    ADVICE_I_ZOMBIE_LEFT_OF_LINE,
    ADVICE_SLOT_MACHINE_SPIN_AGAIN,
    ADVICE_I_ZOMBIE_EAT_ALL_BRAINS,
    ADVICE_PEASHOOTER_DIED,
    ADVICE_STINKY_SLEEPING,
    ADVICE_BEGHOULED_NO_MOVES,
    ADVICE_PLANT_SUNFLOWER5,
    ADVICE_PLANTING_NEED_SLEEPING,
    ADVICE_CLICK_TO_CONTINUE,
    ADVICE_SURVIVE_FLAGS,
    ADVICE_UNLOCKED_MODE,
    ADVICE_NEED_WHEELBARROW,
    ADVICE_NEED_ACHIVEMENT_EARNED = 66,
    NUM_ADVICE_TYPES
};
enum AlmanacPage { ALMANAC_PAGE_INDEX, ALMANAC_PAGE_PLANTS, ALMANAC_PAGE_ZOMBIES };
enum AwardType {
    AWARD_FORLEVEL,
    AWARD_CREDITS_ZOMBIENOTE,
    AWARD_HELP_ZOMBIENOTE,
    AWARD_ACHIEVEMENTONLY,
    AWARD_PRECREDITS_ZOMBIENOTE,
};
enum BackgroundType {
    BACKGROUND_1_DAY,
    BACKGROUND_2_NIGHT,
    BACKGROUND_3_POOL,
    BACKGROUND_4_FOG,
    BACKGROUND_5_ROOF,
    BACKGROUND_6_BOSS,
    BACKGROUND_MUSHROOM_GARDEN,
    BACKGROUND_GREENHOUSE,
    BACKGROUND_ZOMBIQUARIUM,
    BACKGROUND_TREEOFWISDOM
};
enum BoardResult {
    BOARDRESULT_NONE = 0,
    BOARDRESULT_WON = 1,
    BOARDRESULT_LOST = 2,
    BOARDRESULT_RESTART = 3,
    BOARDRESULT_QUIT = 4,
    BOARDRESULT_QUIT_APP = 5,
    BOARDRESULT_CHEAT = 6,
    BOARDRESULT_VS_PLANT_WON = 7,
    BOARDRESULT_VS_ZOMBIE_WON = 8
};
enum BossPart { BOSS_PART_BACK_LEG = 0, BOSS_PART_FRONT_LEG = 1, BOSS_PART_MAIN = 2, BOSS_PART_BACK_ARM = 3, BOSS_PART_FIREBALL = 4 };
enum ChallengePage {
    CHALLENGE_PAGE_SURVIVAL = 0,
    CHALLENGE_PAGE_CHALLENGE = 1,
    CHALLENGE_PAGE_LIMBO = 2,
    CHALLENGE_PAGE_COOP = 3,
    CHALLENGE_PAGE_PUZZLE = 4,
    MAX_CHALLANGE_PAGES = 5,
    CHALLENGE_PAGE_VS = 6,
};
enum ChallengeState {
    STATECHALLENGE_NORMAL,
    STATECHALLENGE_BEGHOULED_MOVING,
    STATECHALLENGE_BEGHOULED_FALLING,
    STATECHALLENGE_BEGHOULED_NO_MATCHES,
    STATECHALLENGE_SLOT_MACHINE_ROLLING,
    STATECHALLENGE_STORM_FLASH_1,
    STATECHALLENGE_STORM_FLASH_2,
    STATECHALLENGE_STORM_FLASH_3,
    STATECHALLENGE_ZEN_FADING,
    STATECHALLENGE_SCARY_POTTER_MALLETING,
    STATECHALLENGE_LAST_STAND_ONSLAUGHT,
    STATECHALLENGE_TREE_JUST_GREW,
    STATECHALLENGE_TREE_GIVE_WISDOM,
    STATECHALLENGE_TREE_WAITING_TO_BABBLE,
    STATECHALLENGE_TREE_BABBLING,
    STATECHALLENGE_SHOVEL_FLASHING = 15
};
enum ChosenSeedState { SEED_FLYING_TO_BANK = 0, SEED_IN_BANK = 1, SEED_FLYING_TO_CHOOSER = 2, SEED_IN_CHOOSER = 3, SEED_PACKET_HIDDEN = 4 };
enum CoinMotion {
    COIN_MOTION_FROM_SKY = 0,
    COIN_MOTION_FROM_SKY_SLOW = 1,
    COIN_MOTION_FROM_PLANT = 2,
    COIN_MOTION_COIN = 3,
    COIN_MOTION_LAWNMOWER_COIN = 4,
    COIN_MOTION_FROM_PRESENT = 5,
    COIN_MOTION_FROM_BOSS = 6,
    COIN_MOTION_FROM_NEAR_CURSOR = 7,
    COIN_MOTION_FROM_FROM_VS_WON = 8,
    COIN_MOTION_FROM_FROM_GRAVE = 9
};
enum CoinType {
    COIN_NONE,
    COIN_SILVER,
    COIN_GOLD,
    COIN_DIAMOND,
    COIN_SUN,
    COIN_SMALLSUN,
    COIN_LARGESUN,
    COIN_FINAL_SEED_PACKET,
    COIN_TROPHY,
    COIN_SHOVEL,
    COIN_ALMANAC,
    COIN_CARKEYS,
    COIN_VASE,
    COIN_WATERING_CAN,
    COIN_TACO,
    COIN_NOTE,
    COIN_USABLE_SEED_PACKET,
    COIN_PRESENT_PLANT,
    COIN_AWARD_MONEY_BAG,
    COIN_AWARD_PRESENT,
    COIN_AWARD_BAG_DIAMOND,
    COIN_AWARD_SILVER_SUNFLOWER,
    COIN_AWARD_GOLD_SUNFLOWER,
    COIN_CHOCOLATE,
    COIN_AWARD_CHOCOLATE,
    COIN_PRESENT_MINIGAMES,
    COIN_PRESENT_PUZZLE_MODE,
    //    COIN_PRESENT_SURVIVAL_MODE,
    Present32 = 27,
    Present1024 = 28,
    COIN_COOP_DOUBLE_SUN = 29,
    COIN_VS_ZOMBIE_BRAIN = 30,
    COIN_VS_PLANT_TROPHY = 31,
    COIN_VS_ZOMBIE_TROPHY = 32
};
enum CrazyDaveState {
    CRAZY_DAVE_OFF = 0,
    CRAZY_DAVE_ENTERING = 1,
    CRAZY_DAVE_LEAVING = 2,
    CRAZY_DAVE_IDLING = 3,
    CRAZY_DAVE_TALKING = 4,
    CRAZY_DAVE_HANDING_TALKING = 5,
    CRAZY_DAVE_HANDING_IDLING = 6
};
enum CursorType {
    CURSOR_TYPE_NORMAL,
    CURSOR_TYPE_PLANT_FROM_BANK,
    CURSOR_TYPE_PLANT_FROM_USABLE_COIN,
    CURSOR_TYPE_PLANT_FROM_GLOVE,
    CURSOR_TYPE_PLANT_FROM_DUPLICATOR,
    CURSOR_TYPE_PLANT_FROM_WHEEL_BARROW,
    CURSOR_TYPE_SHOVEL,
    CURSOR_TYPE_HAMMER,
    CURSOR_TYPE_COBCANNON_TARGET,
    CURSOR_TYPE_WATERING_CAN,
    CURSOR_TYPE_FERTILIZER,
    CURSOR_TYPE_BUG_SPRAY,
    CURSOR_TYPE_PHONOGRAPH,
    CURSOR_TYPE_CHOCOLATE,
    CURSOR_TYPE_GLOVE,
    CURSOR_TYPE_MONEY_SIGN,
    CURSOR_TYPE_WHEEELBARROW,
    CURSOR_TYPE_TREE_FOOD,
    MushRoomGarden = 18,
    QuariumGarden = 19,
    CURSOR_TYPE_ZENGARDEN = 20,
    TreeOfWisdomGarden = 21
};
enum DamageFlags { DAMAGE_BYPASSES_SHIELD = 0, DAMAGE_HITS_SHIELD_AND_BODY = 1, DAMAGE_FREEZE = 2, DAMAGE_DOESNT_CAUSE_FLASH = 3, DAMAGE_DOESNT_LEAVE_BODY = 4, DAMAGE_SPIKE = 5 };
enum DamageRangeFlags { DAMAGES_GROUND, DAMAGES_FLYING, DAMAGES_SUBMERGED, DAMAGES_DOG, DAMAGES_OFF_GROUND, DAMAGES_DYING, DAMAGES_UNDERGROUND, DAMAGES_ONLY_MINDCONTROLLED };
enum Dialogs {
    DIALOG_NEW_GAME,
    DIALOG_OPTIONS,
    DIALOG_NEWOPTIONS = 2,
    DIALOG_HELPOPTIONS = 3,
    DIALOG_SETTINGS = 4,
    DIALOG_ALMANAC = 5,
    DIALOG_STORE = 6,
    DIALOG_PREGAME_NAG,
    DIALOG_LOAD_GAME,
    DIALOG_CONFIRM_UPDATE_CHECK,
    DIALOG_CHECKING_UPDATES,
    DIALOG_REGISTER_ERROR,
    DIALOG_COLORDEPTH_EXP,
    DIALOG_OPENURL_WAIT,
    DIALOG_OPENURL_FAIL,
    DIALOG_CONFIRM_QUIT = 13,
    DIALOG_HIGH_SCORES,
    DIALOG_NAG,
    DIALOG_INFO,
    DIALOG_GAME_OVER = 16,
    DIALOG_LEVEL_COMPLETE,
    DIALOG_PAUSED = 20,
    DIALOG_NO_MORE_MONEY,
    DIALOG_BONUS,
    DIALOG_CONFIRM_BACK_TO_MAIN = 23,
    DIALOG_CONFIRM_IN_GAME_RESTART = 24,
    DIALOG_THANKS_FOR_REGISTERING,
    DIALOG_NOT_ENOUGH_MONEY = 26,
    DIALOG_UPGRADED = 27,
    DIALOG_NO_UPGRADE,
    DIALOG_CHOOSER_WARNING = 29,
    DIALOG_USERDIALOG,
    DIALOG_CREATEUSER,
    DIALOG_CONFIRMDELETEUSER,
    DIALOG_RENAMEUSER,
    DIALOG_CREATEUSERERROR,
    DIALOG_RENAMEUSERERROR,
    DIALOG_CHEAT = 36,
    DIALOG_CHEATCODE = 37,
    DIALOG_CHEATERROR,
    DIALOG_CONTINUE = 39,
    DIALOG_GETREADY,
    DIALOG_RESTARTCONFIRM = 41,
    DIALOG_CONFIRMPURCHASE,
    DIALOG_CONFIRMSELL,
    DIALOG_TIMESUP,
    DIALOG_VIRTUALHELP,
    DIALOG_JUMPAHEAD,
    DIALOG_CRAZY_DAVE,
    DIALOG_STORE_PURCHASE = 48,
    DIALOG_VISIT_TREE_OF_WISDOM = 49,
    DIALOG_ZEN_SELL = 50,
    DIALOG_MESSAGE = 51,
    DIALOG_IMITATER = 52,
    DIALOG_PURCHASE_PACKET_SLOT = 53,
    DIALOG_PROFILE_CHANGED = 54,
    DIALOG_WAITING_FOR_LEADERBOARD = 56,
    DIALOG_MAIL = 60,
    DIALOG_RETRY_LEADERBOARD = 61,
    DIALOG_RETRY_ACHIEVEMENTS = 62,
    DIALOG_HANDLE_OLDGAMEFILE = 63,
    DIALOG_HANDLE_NODEVICE = 64,
    DIALOG_HANDLE_INVALID_LEVEL = 65,
    DIALOG_PROFILE_LOAD_ERROR = 66,
    DIALOG_PROFILE_SAVE_ERROR = 67,
    DIALOG_CONTENT_LOADING = 68,
    DIALOG_ABOUT,
    RESTART_WARNING,
    DIALOG_UPSELL,
    DIALOG_ACHIEVEMENT_LOCKED,
    DIALOG_UPDATE_NOW,
    DIALOG_MORE_GAMES,
    DIALOG_SKIP_TUTORIAL,
    DIALOG_LEADERBOARD,
    NUM_DIALOGS
};
enum DebugTextMode { DEBUG_TEXT_NONE = 0, DEBUG_TEXT_ZOMBIE_SPAWN = 1, DEBUG_TEXT_MUSIC = 2, DEBUG_TEXT_MEMORY = 3, DEBUG_TEXT_COLLISION = 4 };
enum DrawStringJustification { DS_ALIGN_LEFT = 0, DS_ALIGN_RIGHT = 1, DS_ALIGN_CENTER = 2, DS_ALIGN_LEFT_VERTICAL_MIDDLE = 3, DS_ALIGN_RIGHT_VERTICAL_MIDDLE = 4, DS_ALIGN_CENTER_VERTICAL_MIDDLE = 5 };
enum DrawVariation {
    VARIATION_NORMAL = 0,
    VARIATION_IMITATER = 1,
    VARIATION_MARIGOLD_WHITE,
    VARIATION_MARIGOLD_MAGENTA,
    VARIATION_MARIGOLD_ORANGE,
    VARIATION_MARIGOLD_PINK,
    VARIATION_MARIGOLD_LIGHT_BLUE,
    VARIATION_MARIGOLD_RED,
    VARIATION_MARIGOLD_BLUE,
    VARIATION_MARIGOLD_VIOLET,
    VARIATION_MARIGOLD_LAVENDER,
    VARIATION_MARIGOLD_YELLOW,
    VARIATION_MARIGOLD_LIGHT_GREEN,
    VARIATION_ZEN_GARDEN = 13,
    VARIATION_ZEN_GARDEN_WATER = 14,
    VARIATION_SPROUT_NO_FLOWER = 15,
    VARIATION_IMITATER_LESS = 16,
    VARIATION_AQUARIUM,
    VARIATION_BIG_IDLE
};
enum EffectType { EFFECT_PARTICLE = 0, EFFECT_TRAIL = 1, EFFECT_REANIM = 2, EFFECT_ATTACHMENT = 3, EFFECT_OTHER = 4 };
enum EmitterType { EMITTER_CIRCLE = 0, EMITTER_BOX = 1, EMITTER_BOX_PATH = 2, EMITTER_CIRCLE_PATH = 3, EMITTER_CIRCLE_EVEN_SPACING = 4 };
enum GameMode {
    GAMEMODE_ADVENTURE = 0,
    GAMEMODE_ADVENTURE_HIDE = 1,
    GAMEMODE_SURVIVAL_NORMAL_STAGE_1 = 2,
    GAMEMODE_SURVIVAL_NORMAL_STAGE_2 = 3,
    GAMEMODE_SURVIVAL_NORMAL_STAGE_3 = 4,
    GAMEMODE_SURVIVAL_NORMAL_STAGE_4 = 5,
    GAMEMODE_SURVIVAL_NORMAL_STAGE_5 = 6,
    GAMEMODE_SURVIVAL_HARD_STAGE_1 = 7,
    GAMEMODE_SURVIVAL_HARD_STAGE_2 = 8,
    GAMEMODE_SURVIVAL_HARD_STAGE_3 = 9,
    GAMEMODE_SURVIVAL_HARD_STAGE_4 = 10,
    GAMEMODE_SURVIVAL_HARD_STAGE_5 = 11,
    GAMEMODE_SURVIVAL_ENDLESS_STAGE_1 = 12,
    GAMEMODE_SURVIVAL_ENDLESS_STAGE_2 = 13,
    GAMEMODE_SURVIVAL_ENDLESS_STAGE_3 = 14,
    GAMEMODE_SURVIVAL_ENDLESS_STAGE_4 = 15,
    GAMEMODE_SURVIVAL_ENDLESS_STAGE_5 = 16,
    GAMEMODE_CHALLENGE_WAR_AND_PEAS = 17,
    GAMEMODE_CHALLENGE_WALLNUT_BOWLING = 18,
    GAMEMODE_CHALLENGE_SLOT_MACHINE = 19,
    GAMEMODE_CHALLENGE_HEAVY_WEAPON = 20,
    GAMEMODE_CHALLENGE_BEGHOULED = 21,
    GAMEMODE_CHALLENGE_INVISIGHOUL = 22,
    GAMEMODE_CHALLENGE_SEEING_STARS = 23,
    GAMEMODE_CHALLENGE_ZOMBIQUARIUM = 24,
    GAMEMODE_CHALLENGE_BEGHOULED_TWIST = 25,
    GAMEMODE_CHALLENGE_LITTLE_TROUBLE = 26,
    GAMEMODE_CHALLENGE_PORTAL_COMBAT = 27,
    GAMEMODE_CHALLENGE_COLUMN = 28,
    GAMEMODE_CHALLENGE_BOBSLED_BONANZA = 29,
    GAMEMODE_CHALLENGE_SPEED = 30,
    GAMEMODE_CHALLENGE_WHACK_A_ZOMBIE = 31,
    GAMEMODE_CHALLENGE_LAST_STAND = 32,
    GAMEMODE_CHALLENGE_WAR_AND_PEAS_2 = 33,
    GAMEMODE_CHALLENGE_WALLNUT_BOWLING_2 = 34,
    GAMEMODE_CHALLENGE_POGO_PARTY = 35,
    GAMEMODE_CHALLENGE_FINAL_BOSS = 36,
    GAMEMODE_CHALLENGE_ART_CHALLENGE_WALLNUT = 37,
    GAMEMODE_CHALLENGE_SUNNY_DAY = 38,
    GAMEMODE_CHALLENGE_RESODDED = 39,
    GAMEMODE_CHALLENGE_BIG_TIME = 40,
    GAMEMODE_CHALLENGE_ART_CHALLENGE_SUNFLOWER = 41,
    GAMEMODE_CHALLENGE_AIR_RAID = 42,
    GAMEMODE_CHALLENGE_ICE = 43,
    GAMEMODE_CHALLENGE_ZEN_GARDEN = 44,
    GAMEMODE_CHALLENGE_HIGH_GRAVITY = 45,
    GAMEMODE_CHALLENGE_GRAVE_DANGER = 46,
    GAMEMODE_CHALLENGE_SHOVEL = 47,
    GAMEMODE_CHALLENGE_STORMY_NIGHT = 48,
    GAMEMODE_CHALLENGE_BUNGEE_BLITZ = 49,
    GAMEMODE_CHALLENGE_SQUIRREL = 50,
    GAMEMODE_TREE_OF_WISDOM = 51,
    GAMEMODE_SCARY_POTTER_1 = 52,
    GAMEMODE_PUZZLE_I_ZOMBIE_1 = 53,
    GAMEMODE_SCARY_POTTER_2 = 54,
    GAMEMODE_PUZZLE_I_ZOMBIE_2 = 55,
    GAMEMODE_SCARY_POTTER_3 = 56,
    GAMEMODE_PUZZLE_I_ZOMBIE_3 = 57,
    GAMEMODE_SCARY_POTTER_4 = 58,
    GAMEMODE_PUZZLE_I_ZOMBIE_4 = 59,
    GAMEMODE_SCARY_POTTER_5 = 60,
    GAMEMODE_PUZZLE_I_ZOMBIE_5 = 61,
    GAMEMODE_SCARY_POTTER_6 = 62,
    GAMEMODE_PUZZLE_I_ZOMBIE_6 = 63,
    GAMEMODE_SCARY_POTTER_7 = 64,
    GAMEMODE_PUZZLE_I_ZOMBIE_7 = 65,
    GAMEMODE_SCARY_POTTER_8 = 66,
    GAMEMODE_PUZZLE_I_ZOMBIE_8 = 67,
    GAMEMODE_SCARY_POTTER_9 = 68,
    GAMEMODE_PUZZLE_I_ZOMBIE_9 = 69,
    GAMEMODE_SCARY_POTTER_ENDLESS = 70,
    GAMEMODE_PUZZLE_I_ZOMBIE_ENDLESS = 71,
    GAMEMODE_UPSELL = 72,
    GAMEMODE_INTRO = 73,
    GAMEMODE_MULTI_PLAYER = 74,
    GAMEMODE_MP_VS_HIDE = 75,
    GAMEMODE_MP_VS = 76,
    GAMEMODE_TWO_PLAYER_COOP_DAY = 79,
    GAMEMODE_TWO_PLAYER_COOP_NIGHT = 80,
    GAMEMODE_TWO_PLAYER_COOP_POOL = 81,
    GAMEMODE_TWO_PLAYER_COOP_ROOF = 82,
    GAMEMODE_TWO_PLAYER_COOP_BOWLING = 83,
    GAMEMODE_TWO_PLAYER_COOP_DAY_HARD = 84,
    GAMEMODE_TWO_PLAYER_COOP_NIGHT_HARD = 85,
    GAMEMODE_TWO_PLAYER_COOP_POOL_HARD = 86,
    GAMEMODE_TWO_PLAYER_COOP_ROOF_HARD = 87,
    GAMEMODE_TWO_PLAYER_COOP_BOSS = 88,
    GAMEMODE_TWO_PLAYER_COOP_ENDLESS = 89,
    GAMEMODE_CHALLENGE_RAINING_SEEDS = 90,
    GAMEMODE_CHALLENGE_BUTTERED_POPCORN = 91,
    GAMEMODE_CHALLENGE_POOL_PARTY = 92,
    GAMEMODE_MP_VS_DAY,
    GAMEMODE_MP_VS_NIGHT,
    GAMEMODE_MP_VS_POOL_DAY,
    GAMEMODE_MP_VS_POOL_NIGHT,
    GAMEMODE_MP_VS_ROOF,
    NUM_GAME_MODES
};
enum GameObjectType {
    OBJECT_TYPE_NONE = 0,
    OBJECT_TYPE_PLANT = 1,
    OBJECT_TYPE_PROJECTILE = 2,
    OBJECT_TYPE_COIN = 3,
    OBJECT_TYPE_SEEDPACKET = 4,
    OBJECT_TYPE_SHOVEL = 5,
    OBJECT_TYPE_WATERING_CAN = 6,
    OBJECT_TYPE_FERTILIZER = 7,
    OBJECT_TYPE_BUG_SPRAY = 8,
    OBJECT_TYPE_PHONOGRAPH = 9,
    OBJECT_TYPE_CHOCOLATE = 10,
    OBJECT_TYPE_GLOVE = 11,
    OBJECT_TYPE_MONEY_SIGN = 12,
    OBJECT_TYPE_WHEELBARROW = 13,
    OBJECT_TYPE_TREE_FOOD = 14,
    OBJECT_TYPE_MUSHROOM_GARDEN = 15,
    OBJECT_TYPE_QUARIUM_GARDEN = 16,
    OBJECT_TYPE_ZEN_GARDEN = 17,
    OBJECT_TYPE_TREE_OF_WISDOM_GARDEN = 18,
    OBJECT_TYPE_SLOT_MACHINE_HANDLE = 22,
    OBJECT_TYPE_SCARY_POT = 23,
    OBJECT_TYPE_STINKY = 24,
    OBJECT_TYPE_SEED_BANK_BLANK = 49,
    OBJECT_TYPE_BUTTER = 50,
};
enum GameScenes { SCENE_LOADING = 0, SCENE_MENU = 1, SCENE_LEVEL_INTRO = 2, SCENE_PLAYING = 3, SCENE_ZOMBIES_WON = 4, SCENE_AWARD = 5, SCENE_CREDIT = 6, SCENE_CHALLENGE = 7, SCENE_LEADER_BOARD = 8 };
enum GardenType { GARDEN_MAIN = 0, GARDEN_MUSHROOM = 1, GARDEN_WHEELBARROW = 2, GARDEN_AQUARIUM = 3 };
enum GridItemType {
    GRIDITEM_NONE = 0,
    GRIDITEM_GRAVESTONE = 1,
    GRIDITEM_CRATER,
    GRIDITEM_LADDER = 3,
    GRIDITEM_PORTAL_CIRCLE,
    GRIDITEM_PORTAL_SQUARE,
    GRIDITEM_BRAIN,
    GRIDITEM_SCARY_POT,
    GRIDITEM_SQUIRREL,
    GRIDITEM_ZEN_TOOL,
    GRIDITEM_STINKY,
    GRIDITEM_RAKE,
    GRIDITEM_IZOMBIE_BRAIN,
    GRIDITEM_VS_TARGET_ZOMBIE = 14
};
enum GridItemState {
    GRIDITEM_STATE_NORMAL = 0,
    GRIDITEM_STATE_GRAVESTONE_SPECIAL = 1,
    GRIDITEM_STATE_PORTAL_CLOSED = 2,
    GRIDITEM_STATE_SCARY_POT_QUESTION = 3,
    GRIDITEM_STATE_SCARY_POT_LEAF = 4,
    GRIDITEM_STATE_SCARY_POT_ZOMBIE = 5,
    GRIDITEM_STATE_SQUIRREL_WAITING = 6,
    GRIDITEM_STATE_SQUIRREL_PEEKING = 7,
    GRIDITEM_STATE_SQUIRREL_RUNNING_UP = 8,
    GRIDITEM_STATE_SQUIRREL_RUNNING_DOWN = 9,
    GRIDITEM_STATE_SQUIRREL_RUNNING_LEFT = 10,
    GRIDITEM_STATE_SQUIRREL_RUNNING_RIGHT = 11,
    GRIDITEM_STATE_SQUIRREL_CAUGHT = 12,
    GRIDITEM_STATE_SQUIRREL_ZOMBIE = 13,
    GRIDITEM_STATE_ZEN_TOOL_WATERING_CAN = 14,
    GRIDITEM_STATE_ZEN_TOOL_FERTILIZER = 15,
    GRIDITEM_STATE_ZEN_TOOL_BUG_SPRAY = 16,
    GRIDITEM_STATE_ZEN_TOOL_PHONOGRAPH = 17,
    GRIDITEM_STATE_ZEN_TOOL_GOLD_WATERING_CAN = 18,
    GRIDITEM_STINKY_WALKING_LEFT = 19,
    GRIDITEM_STINKY_TURNING_LEFT = 20,
    GRIDITEM_STINKY_WALKING_RIGHT = 21,
    GRIDITEM_STINKY_TURNING_RIGHT = 22,
    GRIDITEM_STINKY_SLEEPING = 23,
    GRIDITEM_STINKY_FALLING_ASLEEP = 24,
    GRIDITEM_STINKY_WAKING_UP = 25,
    GRIDITEM_STATE_RAKE_ATTRACTING = 26,
    GRIDITEM_STATE_RAKE_WAITING = 27,
    GRIDITEM_STATE_RAKE_TRIGGERED = 28,
    GRIDITEM_STATE_BRAIN_SQUISHED = 29
};
enum GridSquareType { GRIDSQUARE_NONE = 0, GRIDSQUARE_GRASS = 1, GRIDSQUARE_DIRT, GRIDSQUARE_POOL, GRIDSQUARE_HIGH_GROUND };
enum HelmType {
    HELMTYPE_NONE = 0,
    HELMTYPE_TRAFFIC_CONE = 1,
    HELMTYPE_PAIL = 2,
    HELMTYPE_FOOTBALL = 3,
    HELMTYPE_DIGGER = 4,
    HELMTYPE_REDEYES = 5,
    HELMTYPE_HEADBAND = 6,
    HELMTYPE_BOBSLED = 7,
    HELMTYPE_WALLNUT = 8,
    HELMTYPE_TALLNUT = 9
};
enum LawnMowerState { MOWER_ROLLING_IN = 0, MOWER_READY = 1, MOWER_TRIGGERED = 2, MOWER_SQUISHED = 3 };
enum LawnMowerType { LAWNMOWER_LAWN, LAWNMOWER_POOL, LAWNMOWER_ROOF, LAWNMOWER_SUPER_MOWER, NUM_MOWER_TYPES };
enum MessageStyle {
    MESSAGE_STYLE_OFF = 0,
    MESSAGE_STYLE_TUTORIAL_LEVEL1 = 1,
    MESSAGE_STYLE_TUTORIAL_LEVEL1_STAY = 2,
    MESSAGE_STYLE_TUTORIAL_LEVEL2 = 3,
    MESSAGE_STYLE_TUTORIAL_LATER = 4,
    MESSAGE_STYLE_TUTORIAL_LATER_STAY = 5,
    MESSAGE_STYLE_HINT_LONG = 6,
    MESSAGE_STYLE_HINT_FAST = 7,
    MESSAGE_STYLE_HINT_STAY = 8,
    MESSAGE_STYLE_HINT_TALL_FAST = 9,
    MESSAGE_STYLE_HINT_TALL_UNLOCKMESSAGE = 10,
    MESSAGE_STYLE_HINT_TALL_LONG = 11,
    MESSAGE_STYLE_BIG_MIDDLE = 12,
    MESSAGE_STYLE_BIG_MIDDLE_FAST = 13,
    MESSAGE_STYLE_HOUSE_NAME = 14,
    MESSAGE_STYLE_HUGE_WAVE = 15,
    MESSAGE_STYLE_SLOT_MACHINE = 16,
    MESSAGE_STYLE_ZEN_GARDEN_LONG = 17,
    MESSAGE_STYLE_ACHIEVEMENT = 3
};
enum MowerHeight { MOWER_HEIGHT_LAND = 0, MOWER_HEIGHT_DOWN_TO_POOL = 1, MOWER_HEIGHT_IN_POOL = 2, MOWER_HEIGHT_UP_TO_LAND = 3 };
enum NotRecommend {
    NOT_RECOMMENDED_NOCTURNAL,
    NOT_RECOMMENDED_NEEDS_POOL,
    NOT_RECOMMENDED_NEEDS_GRAVES,
    NOT_RECOMMENDED_NEEDS_FOG,
    NOT_RECOMMENDED_NEEDS_ROOF,
    NOT_RECOMMENDED_ON_ROOF,
    NOT_RECOMMENDED_FOR_CHALLENGE,
    NOT_RECOMMENDED_AT_NIGHT
};
enum ParticleEffect {
    PARTICLE_NONE = -1,
    PARTICLE_MELONSPLASH = 0,
    PARTICLE_WINTERMELON = 1,
    PARTICLE_FUMECLOUD,
    PARTICLE_POPCORNSPLASH = 3,
    PARTICLE_POWIE = 4,
    PARTICLE_JACKEXPLODE,
    PARTICLE_ZOMBIE_HEAD,
    PARTICLE_ZOMBIE_ARM,
    PARTICLE_ZOMBIE_TRAFFIC_CONE,
    PARTICLE_ZOMBIE_PAIL,
    PARTICLE_ZOMBIE_HELMET,
    PARTICLE_ZOMBIE_FLAG,
    PARTICLE_ZOMBIE_DOOR,
    PARTICLE_ZOMBIE_TRASH_CAN = 13,
    PARTICLE_ZOMBIE_NEWSPAPER = 14,
    PARTICLE_ZOMBIE_HEADLIGHT,
    PARTICLE_POW,
    PARTICLE_ZOMBIE_POGO,
    PARTICLE_ZOMBIE_NEWSPAPER_HEAD,
    PARTICLE_ZOMBIE_BALLOON_HEAD,
    PARTICLE_SOD_ROLL,
    PARTICLE_GRAVE_STONE_RISE,
    PARTICLE_PLANTING = 22,
    PARTICLE_PLANTING_POOL = 23,
    PARTICLE_ZOMBIE_RISE,
    PARTICLE_GRAVE_BUSTER,
    PARTICLE_GRAVE_BUSTER_DIE,
    PARTICLE_POOL_SPLASH,
    PARTICLE_ICE_SPARKLE,
    PARTICLE_SEED_PACKET = 29,
    PARTICLE_TALL_NUT_BLOCK,
    PARTICLE_DOOM,
    PARTICLE_DIGGER_RISE,
    PARTICLE_DIGGER_TUNNEL,
    PARTICLE_DANCER_RISE,
    PARTICLE_POOL_SPARKLY = 35,
    PARTICLE_WALLNUT_EAT_SMALL,
    PARTICLE_WALLNUT_EAT_LARGE,
    PARTICLE_PEA_SPLAT = 38,
    PARTICLE_BUTTER_SPLAT = 39,
    PARTICLE_CABBAGE_SPLAT = 40,
    PARTICLE_PUFF_SPLAT = 41,
    PARTICLE_STAR_SPLAT = 42,
    PARTICLE_ICE_TRAP,
    PARTICLE_SNOWPEA_SPLAT = 44,
    PARTICLE_SNOWPEA_PUFF,
    PARTICLE_SNOWPEA_TRAIL,
    PARTICLE_LANTERN_SHINE,
    PARTICLE_SEED_PACKET_PICKUP,
    PARTICLE_POTATO_MINE,
    PARTICLE_POTATO_MINE_RISE,
    PARTICLE_PUFFSHROOM_TRAIL,
    PARTICLE_PUFFSHROOM_MUZZLE,
    PARTICLE_SEED_PACKET_FLASH = 53,
    PARTICLE_WHACK_A_ZOMBIE_RISE,
    PARTICLE_ZOMBIE_LADDER,
    PARTICLE_UMBRELLA_REFLECT,
    PARTICLE_SEED_PACKET_PICK,
    PARTICLE_ICE_TRAP_ZOMBIE,
    PARTICLE_ICE_TRAP_RELEASE,
    PARTICLE_ZAMBONI_SMOKE,
    PARTICLE_GLOOMCLOUD,
    PARTICLE_ZOMBIE_POGO_HEAD,
    PARTICLE_ZAMBONI_TIRE,
    PARTICLE_ZAMBONI_EXPLOSION,
    PARTICLE_ZAMBONI_EXPLOSION2,
    PARTICLE_CATAPULT_EXPLOSION,
    PARTICLE_MOWER_CLOUD,
    PARTICLE_BOSS_ICE_BALL,
    PARTICLE_BLASTMARK = 69,
    PARTICLE_COIN_PICKUP_ARROW = 70,
    PARTICLE_PRESENT_PICKUP,
    PARTICLE_IMITATER_MORPH,
    PARTICLE_MOWERED_ZOMBIE_HEAD,
    PARTICLE_MOWERED_ZOMBIE_ARM,
    PARTICLE_ZOMBIE_HEAD_POOL,
    PARTICLE_ZOMBIE_BOSS_FIREBALL,
    PARTICLE_FIREBALL_DEATH,
    PARTICLE_ICEBALL_DEATH,
    PARTICLE_ICEBALL_TRAIL,
    PARTICLE_FIREBALL_TRAIL,
    PARTICLE_BOSS_EXPLOSION,
    PARTICLE_SCREEN_FLASH,
    PARTICLE_TROPHY_SPARKLE = 83,
    PARTICLE_PORTAL_CIRCLE,
    PARTICLE_PORTAL_SQUARE,
    PARTICLE_POTTED_PLANT_GLOW,
    PARTICLE_POTTED_WATER_PLANT_GLOW,
    PARTICLE_POTTED_ZEN_GLOW,
    PARTICLE_MIND_CONTROL,
    PARTICLE_VASE_SHATTER,
    PARTICLE_VASE_SHATTER_LEAF,
    PARTICLE_VASE_SHATTER_ZOMBIE,
    PARTICLE_AWARD_PICKUP_ARROW = 93,
    PARTICLE_ZOMBIE_SEAWEED,
    PARTICLE_ZOMBIE_MUSTACHE,
    PARTICLE_ZOMBIE_SUNGLASS,
    PARTICLE_ZOMBIE_PINATA = 97,
    PARTICLE_DUST_SQUASH,
    PARTICLE_DUST_FOOT,
    PARTICLE_ZOMBIE_DAISIES = 100,
    PARTICLE_STARBURST,
    PARTICLE_PERSENT_PICK_UP_ARROW,
    NUM_PARTICLES
};

enum PlantPriority {
    TOPPLANT_EATING_ORDER = 0,
    TOPPLANT_DIGGING_ORDER = 1,
    TOPPLANT_BUNGEE_ORDER = 2,
    TOPPLANT_CATAPULT_ORDER = 3,
    TOPPLANT_ZEN_TOOL_ORDER = 4,
    TOPPLANT_ANY = 5,
    TOPPLANT_ONLY_NORMAL_POSITION = 6,
    TOPPLANT_ONLY_FLYING = 7,
    TOPPLANT_ONLY_PUMPKIN = 8,
    TOPPLANT_ONLY_UNDER_PLANT = 9
};
enum PlantingReason {
    PLANTING_OK = 0,
    PLANTING_NOT_HERE = 1,
    PLANTING_ONLY_ON_GRAVES = 2,
    PLANTING_ONLY_IN_POOL = 3,
    PLANTING_ONLY_ON_GROUND = 4,
    PLANTING_NEEDS_POT = 5,
    PLANTING_NOT_ON_ART = 6,
    PLANTING_NOT_PASSED_LINE = 7,
    PLANTING_NEEDS_UPGRADE = 8,
    PLANTING_NOT_ON_GRAVE = 9,
    PLANTING_NOT_ON_CRATER = 10,
    PLANTING_NOT_ON_WATER = 11,
    PLANTING_NEEDS_GROUND = 12,
    PLANTING_NEEDS_SLEEPING = 13,
    PLANTING_NOT_PASSED_LINE_VS = 15,
};
enum PlantRowType { PLANTROW_DIRT = 0, PLANTROW_NORMAL = 1, PLANTROW_POOL = 2, PLANTROW_HIGH_GROUND = 3 };
enum PottedPlantAge { PLANTAGE_SPROUT = 0, PLANTAGE_SMALL = 1, PLANTAGE_MEDIUM = 2, PLANTAGE_FULL = 3 };
enum PottedPlantNeed { PLANTNEED_NONE = 0, PLANTNEED_WATER = 1, PLANTNEED_FERTILIZER = 2, PLANTNEED_BUGSPRAY = 3, PLANTNEED_PHONOGRAPH = 4 };
enum ProjectileMotion {
    MOTION_STRAIGHT = 0,      // 水平向右
    MOTION_LOBBED = 1,        // 抛物线
    MOTION_THREEPEATER = 2,   // 偏转向右
    MOTION_BEE = 3,           //
    MOTION_BEE_BACKWARDS = 4, //
    MOTION_PUFF = 5,          // 水平向右（一段时间后消失）
    MOTION_BACKWARDS = 6,     // 水平向左
    MOTION_STAR = 7,          // 斜向运动
    MOTION_FLOAT_OVER = 8,    // 缓慢漂浮向右（无碰撞）
    MOTION_HOMING = 9         // 追踪
};
enum ProjectileType {
    PROJECTILE_PEA = 0,         // 豌豆
    PROJECTILE_SNOWPEA = 1,     // 冰豌豆
    PROJECTILE_CABBAGE = 2,     // 卷心菜
    PROJECTILE_MELON = 3,       // 西瓜
    PROJECTILE_PUFF = 4,        // 孢子
    PROJECTILE_WINTERMELON = 5, // 冰瓜
    PROJECTILE_FIREBALL = 6,    // 火豌豆
    PROJECTILE_STAR = 7,        // 星星
    PROJECTILE_SPIKE = 8,       // 尖刺
    PROJECTILE_BASKETBALL = 9,  // 篮球
    PROJECTILE_KERNEL = 10,     // 玉米粒
    PROJECTILE_COBBIG = 11,     // 玉米加农炮
    PROJECTILE_BUTTER = 12,     // 黄油
    PROJECTILE_ZOMBIE_PEA = 13, // 僵尸豌豆
    NUM_PROJECTILES = 14
};
enum ReanimationType {
    REANIM_NONE = -1,
    REANIM_LOADBAR_SPROUT,
    REANIM_LOADBAR_ZOMBIEHEAD,
    REANIM_SODROLL,
    REANIM_FINAL_WAVE,
    REANIM_PEASHOOTER,
    REANIM_WALLNUT,
    REANIM_LILYPAD,
    REANIM_SUNFLOWER,
    REANIM_LAWNMOWER,
    REANIM_READYSETPLANT,
    REANIM_CHERRYBOMB,
    REANIM_SQUASH,
    REANIM_DOOMSHROOM,
    REANIM_SNOWPEA,
    REANIM_REPEATER,
    REANIM_SUNSHROOM,
    REANIM_TALLNUT,
    REANIM_FUMESHROOM,
    REANIM_PUFFSHROOM,
    REANIM_HYPNOSHROOM,
    REANIM_CHOMPER,
    REANIM_ZOMBIE,
    REANIM_SUN,
    REANIM_POTATOMINE,
    REANIM_SPIKEWEED,
    REANIM_SPIKEROCK,
    REANIM_THREEPEATER,
    REANIM_MARIGOLD,
    REANIM_ICESHROOM,
    REANIM_ZOMBIE_FOOTBALL,
    REANIM_ZOMBIE_NEWSPAPER,
    REANIM_ZOMBIE_ZAMBONI,
    REANIM_SPLASH,
    REANIM_JALAPENO,
    REANIM_JALAPENO_FIRE,
    REANIM_COIN_SILVER,
    REANIM_ZOMBIE_CHARRED,
    REANIM_ZOMBIE_CHARRED_IMP,
    REANIM_ZOMBIE_CHARRED_DIGGER,
    REANIM_ZOMBIE_CHARRED_ZAMBONI,
    REANIM_ZOMBIE_CHARRED_CATAPULT,
    REANIM_ZOMBIE_CHARRED_GARGANTUAR,
    REANIM_SCRAREYSHROOM,
    REANIM_PUMPKIN,
    REANIM_PLANTERN,
    REANIM_TORCHWOOD,
    REANIM_SPLITPEA,
    REANIM_SEASHROOM,
    REANIM_BLOVER,
    REANIM_FLOWER_POT,
    REANIM_CACTUS,
    REANIM_DANCER,
    REANIM_TANGLEKELP,
    REANIM_STARFRUIT,
    REANIM_POLEVAULTER,
    REANIM_BALLOON,
    REANIM_GARGANTUAR,
    REANIM_IMP,
    REANIM_DIGGER,
    REANIM_DIGGER_DIRT,
    REANIM_ZOMBIE_DOLPHINRIDER,
    REANIM_POGO,
    REANIM_BACKUP_DANCER,
    REANIM_BOBSLED,
    REANIM_JACKINTHEBOX,
    REANIM_SNORKEL,
    REANIM_BUNGEE,
    REANIM_CATAPULT,
    REANIM_LADDER,
    REANIM_PUFF,
    REANIM_SLEEPING,
    REANIM_GRAVE_BUSTER,
    REANIM_ZOMBIES_WON,
    REANIM_MAGNETSHROOM,
    REANIM_BOSS,
    REANIM_CABBAGEPULT,
    REANIM_KERNELPULT,
    REANIM_MELONPULT,
    REANIM_COFFEEBEAN,
    REANIM_UMBRELLALEAF,
    REANIM_GATLINGPEA,
    REANIM_CATTAIL,
    REANIM_GLOOMSHROOM,
    REANIM_BOSS_ICEBALL,
    REANIM_BOSS_FIREBALL,
    REANIM_COBCANNON,
    REANIM_GARLIC,
    REANIM_GOLD_MAGNET,
    REANIM_WINTER_MELON,
    REANIM_TWIN_SUNFLOWER,
    REANIM_POOL_CLEANER,
    REANIM_ROOF_CLEANER,
    REANIM_FIRE_PEA,
    REANIM_IMITATER,
    REANIM_YETI,
    REANIM_BOSS_DRIVER,
    REANIM_LAWN_MOWERED_ZOMBIE,
    REANIM_CRAZY_DAVE,
    REANIM_TEXT_FADE_ON,
    REANIM_HAMMER,
    REANIM_SLOT_MACHINE_HANDLE,
    REANIM_SELECTOR_SCREEN,
    REANIM_PORTAL_CIRCLE,
    REANIM_PORTAL_SQUARE,
    REANIM_ZENGARDEN_SPROUT,
    REANIM_ZENGARDEN_WATERINGCAN,
    REANIM_ZENGARDEN_FERTILIZER,
    REANIM_ZENGARDEN_BUGSPRAY,
    REANIM_ZENGARDEN_PHONOGRAPH,
    REANIM_DIAMOND,
    REANIM_STINKY,
    REANIM_RAKE,
    REANIM_RAIN_CIRCLE,
    REANIM_RAIN_SPLASH,
    REANIM_ZOMBIE_SURPRISE,
    REANIM_COIN_GOLD,
    Woodsign,
    REANIM_ZOMBIE_FLAGPOLE = 141,
    REANIM_LEADERBOARDS_HOUSE = 147,
    REANIM_LEADERBOARDS_HOUSE_SCENE = 148,
    REANIM_LEADERBOARDS_HOUSE_BG_TREES = 149,
    REANIM_LEADERBOARDS_HOUSE_BG_HOUSES = 150,
    REANIM_LEADERBOARDS_HOUSE_CLOUDS = 151,
    REANIM_ACHIEVEMENT_HOME_SECURITY = 162,
    REANIM_ACHIEVEMENT_MORTICULTURALIST = 163,
    REANIM_ACHIEVEMENT_SMARTY_BRANCHES = 164,
    REANIM_ACHIEVEMENT_CRASH_OF_THE_TITAN = 165,
    REANIM_ACHIEVEMENT_Zffs4Evr = 166,
    REANIM_ACHIEVEMENT_ALIVE_AND_PLANTING = 167,
    REANIM_ACHIEVEMENT_VERSUS = 168,
    REANIM_ACHIEVEMENT_SOIL_YOUR_PLANTS = 169,
    REANIM_ACHIEVEMENT_EXPLODONATOR = 170,
    REANIM_ACHIEVEMENT_CLOSE_SHAVE = 171,
    REANIM_ACHIEVEMENT_SHOP = 172,
    REANIM_ACHIEVEMENT_NOM_NOM_NOM = 173,
    REANIM_ZOMBATAR_HEAD = 178,
    NUM_REANIMS
};
enum ReanimLoopType {
    REANIM_LOOP = 0,
    REANIM_LOOP_FULL_LAST_FRAME = 1,
    REANIM_PLAY_ONCE = 2,
    REANIM_PLAY_ONCE_AND_HOLD = 3,
    REANIM_PLAY_ONCE_FULL_LAST_FRAME = 4,
    REANIM_PLAY_ONCE_FULL_LAST_FRAME_AND_HOLD = 5
};
enum RenderLayer {
    RENDER_LAYER_ROW_OFFSET = 10000,
    RENDER_LAYER_UI_BOTTOM = 100000,
    RENDER_LAYER_GROUND = 200000,
    RENDER_LAYER_LAWN = 300000,
    RENDER_LAYER_GRAVE_STONE = 301000,
    RENDER_LAYER_PLANT = 302000,
    RENDER_LAYER_ZOMBIE = 303000,
    RENDER_LAYER_BOSS = 304000,
    RENDER_LAYER_PROJECTILE = 305000,
    RENDER_LAYER_LAWN_MOWER = 306000,
    RENDER_LAYER_PARTICLE = 307000,
    RENDER_LAYER_TOP = 400000,
    RENDER_LAYER_FOG = 500000,
    RENDER_LAYER_COIN_BANK = 600000,
    RENDER_LAYER_UI_TOP = 700000,
    RENDER_LAYER_ABOVE_UI = 800000,
    RENDER_LAYER_SCREEN_FADE = 900000
};
enum RenderObjectType {
    RENDER_ITEM_COIN,
    RENDER_ITEM_PROJECTILE,
    RENDER_ITEM_ZOMBIE,
    RENDER_ITEM_ZOMBIE_SHADOW,
    RENDER_ITEM_ZOMBIE_BUNGEE_TARGET,
    RENDER_ITEM_PLANT,
    RENDER_ITEM_PLANT_OVERLAY,
    RENDER_ITEM_PLANT_MAGNET_ITEMS,
    RENDER_ITEM_CURSOR_PREVIEW,
    RENDER_ITEM_PARTICLE,
    RENDER_ITEM_REANIMATION,
    RENDER_ITEM_ICE,
    RENDER_ITEM_TOP_UI,
    RENDER_ITEM_FOG,
    RENDER_ITEM_STORM,
    RENDER_ITEM_BOTTOM_UI,
    RENDER_ITEM_BACKDROP,
    RENDER_ITEM_DOOR_MASK,
    RENDER_ITEM_COIN_BANK,
    RENDER_ITEM_PROJECTILE_SHADOW,
    RENDER_ITEM_MOWER,
    RENDER_ITEM_SCREEN_FADE,
    RENDER_ITEM_BOSS_PART,
    RENDER_ITEM_GRID_ITEM,
    RENDER_ITEM_GRID_ITEM_OVERLAY
};
enum ScaryPotType { SCARYPOT_NONE = 0, SCARYPOT_SEED = 1, SCARYPOT_ZOMBIE = 2, SCARYPOT_SUN = 3 };
enum SeedChooserState { CHOOSE_NORMAL = 0, CHOOSE_VIEW_LAWN = 1 };
enum SeedType { // 直接从WP复制过来的，怀疑其中有错误，因为TV有重型武器关卡，多了三个种子
    SEED_PEASHOOTER = 0,
    SEED_SUNFLOWER = 1,
    SEED_CHERRYBOMB = 2,
    SEED_WALLNUT = 3,
    SEED_POTATOMINE = 4,
    SEED_SNOWPEA = 5,
    SEED_CHOMPER = 6,
    SEED_REPEATER = 7,
    SEED_PUFFSHROOM = 8,
    SEED_SUNSHROOM = 9,
    SEED_FUMESHROOM = 10,
    SEED_GRAVEBUSTER = 11,
    SEED_HYPNOSHROOM = 12,
    SEED_SCAREDYSHROOM = 13,
    SEED_ICESHROOM = 14,
    SEED_DOOMSHROOM = 15,
    SEED_LILYPAD = 16,
    SEED_SQUASH = 17,
    SEED_THREEPEATER = 18,
    SEED_TANGLEKELP = 19,
    SEED_JALAPENO = 20,
    SEED_SPIKEWEED = 21,
    SEED_TORCHWOOD = 22,
    SEED_TALLNUT = 23,
    SEED_SEASHROOM = 24,
    SEED_PLANTERN = 25,
    SEED_CACTUS = 26,
    SEED_BLOVER = 27,
    SEED_SPLITPEA = 28,
    SEED_STARFRUIT = 29,
    SEED_PUMPKINSHELL = 30,
    SEED_MAGNETSHROOM = 31,
    SEED_CABBAGEPULT = 32,
    SEED_FLOWERPOT = 33,
    SEED_KERNELPULT = 34,
    SEED_INSTANT_COFFEE = 35,
    SEED_GARLIC = 36,
    SEED_UMBRELLA = 37,
    SEED_MARIGOLD = 38,
    SEED_MELONPULT = 39,
    SEED_GATLINGPEA = 40,
    SEED_TWINSUNFLOWER = 41,
    SEED_GLOOMSHROOM = 42,
    SEED_CATTAIL = 43,
    SEED_WINTERMELON = 44,
    SEED_GOLD_MAGNET = 45,
    SEED_SPIKEROCK = 46,
    SEED_COBCANNON = 47,
    SEED_IMITATER = 48,
    NUM_SEEDS_IN_CHOOSER = 49,
    SEED_EXPLODE_O_NUT = 50,
    SEED_GIANT_WALLNUT = 51,
    SEED_SPROUT = 52,
    SEED_LEFTPEATER = 53,
    NUM_SEED_TYPES = 54,
    SEED_BEGHOULED_BUTTON_SHUFFLE = 55,
    SEED_BEGHOULED_BUTTON_CRATER = 56,
    SEED_SLOT_MACHINE_SUN = 57,
    SEED_SLOT_MACHINE_DIAMOND = 58,
    SEED_ZOMBIQUARIUM_SNORKLE = 59,
    SEED_ZOMBIQUARIUM_TROPHY = 60,
    SEED_ZOMBIE_TOMBSTONE = 61,
    SEED_ZOMBIE_NORMAL = 62,
    SEED_ZOMBIE_TRASH_BIN = 63,
    SEED_ZOMBIE_TRAFFIC_CONE = 64,
    SEED_ZOMBIE_POLEVAULTER = 65,
    SEED_ZOMBIE_PAIL = 66,
    SEED_ZOMBIE_FLAG = 67,
    SEED_ZOMBIE_NEWSPAPER = 68,
    SEED_ZOMBIE_SCREEN_DOOR = 69,
    SEED_ZOMBIE_FOOTBALL = 70,
    SEED_ZOMBIE_DANCER = 71,
    SEED_ZOMBONI = 72,
    SEED_ZOMBIE_JACK_IN_THE_BOX = 73,
    SEED_ZOMBIE_DIGGER = 74,
    SEED_ZOMBIE_POGO = 75,
    SEED_ZOMBIE_BUNGEE = 76,
    SEED_ZOMBIE_LADDER = 77,
    SEED_ZOMBIE_CATAPULT = 78,
    SEED_ZOMBIE_GARGANTUAR = 79,
    SEED_ZOMBIE_UNKNOWN = 80,
    SEED_ZOMBIE_DUCKY_TUBE = 81,
    SEED_ZOMBIE_SNORKEL = 82,
    SEED_ZOMBIE_DOLPHIN_RIDER = 83,
    SEED_ZOMBIE_IMP = 84,
    SEED_ZOMBIE_BALLOON = 85,
    SEED_NONE = -1
};
enum ShieldType { SHIELDTYPE_NONE, SHIELDTYPE_DOOR, SHIELDTYPE_NEWSPAPER, SHIELDTYPE_LADDER, SHIELDTYPE_TRASH_BIN = 4 };
enum StoreItem {
    STORE_ITEM_PLANT_GATLINGPEA = 0,
    STORE_ITEM_PLANT_TWINSUNFLOWER = 1,
    STORE_ITEM_PLANT_GLOOMSHROOM = 2,
    STORE_ITEM_PLANT_CATTAIL = 3,
    STORE_ITEM_PLANT_WINTERMELON = 4,
    STORE_ITEM_PLANT_GOLD_MAGNET = 5,
    STORE_ITEM_PLANT_SPIKEROCK = 6,
    STORE_ITEM_PLANT_COBCANNON = 7,
    STORE_ITEM_PLANT_IMITATER = 8,
    STORE_ITEM_BONUS_LAWN_MOWER,
    STORE_ITEM_POTTED_MARIGOLD_1,
    STORE_ITEM_POTTED_MARIGOLD_2,
    STORE_ITEM_POTTED_MARIGOLD_3,
    STORE_ITEM_GOLD_WATERINGCAN = 13,
    STORE_ITEM_FERTILIZER = 14,
    STORE_ITEM_BUG_SPRAY = 15,
    STORE_ITEM_PHONOGRAPH = 16,
    STORE_ITEM_GARDENING_GLOVE = 17,
    STORE_ITEM_MUSHROOM_GARDEN = 18,
    STORE_ITEM_WHEEL_BARROW = 19,
    STORE_ITEM_STINKY_THE_SNAIL = 20,
    STORE_ITEM_PACKET_UPGRADE = 21,
    STORE_ITEM_POOL_CLEANER = 22,
    STORE_ITEM_ROOF_CLEANER = 23,
    STORE_ITEM_RAKE = 24,
    STORE_ITEM_AQUARIUM_GARDEN = 25,
    STORE_ITEM_CHOCOLATE = 26,
    STORE_ITEM_TREE_OF_WISDOM = 27,
    STORE_ITEM_TREE_FOOD = 28,
    STORE_ITEM_FIRSTAID = 29,
    STORE_ITEM_PVZ_ICON = 30,
    STORE_ITEM_BLUEPRINT_BLING = 31,
    STORE_ITEM_BLUEPRINT_SCARY = 32,
    STORE_ITEM_BLUEPRINT_TRAILER = 33,
    STORE_ITEM_BLUEPRINT_FUTURE = 34,
    STORE_ITEM_BLUEPRINT_CLOWN = 35,
    STORE_ITEM_BLUEPRINT_CHANGE = 36,
    STORE_ITEM_INVALID = -1
};
enum StorePages { STORE_PAGE_SLOT_UPGRADES = 0, STORE_PAGE_PLANT_UPGRADES = 1, STORE_PAGE_ZEN1 = 2, STORE_PAGE_ZEN2 = 3, NUM_STORE_PAGES = 4 };
enum TodCurves {
    CURVE_CONSTANT,           // 常函数曲线
    CURVE_LINEAR,             // 线性曲线
    CURVE_EASE_IN,            // 二次曲线（缓入）
    CURVE_EASE_OUT,           // 二次曲线（缓出）
    CURVE_EASE_IN_OUT,        // 缓入缓出曲线
    CURVE_EASE_IN_OUT_WEAK,   // 缓入缓出曲线（效果减弱）
    CURVE_FAST_IN_OUT,        // 快入快出曲线
    CURVE_FAST_IN_OUT_WEAK,   // 快入快出曲线（效果减弱）
    CURVE_WEAK_FAST_IN_OUT,   // 【废弃】弱快入快出曲线
    CURVE_BOUNCE,             // 弹跳效果曲线
    CURVE_BOUNCE_FAST_MIDDLE, // 弹跳效果曲线（尖形）
    CURVE_BOUNCE_SLOW_MIDDLE, // 弹跳效果曲线（罩形）
    CURVE_SIN_WAVE,           // 正弦曲线
    CURVE_EASE_SIN_WAVE       // 缓入缓出的正弦曲线
};
enum TrialType { TRIALTYPE_NONE, TRIALTYPE_STAGELOCKED };
enum TutorialState {
    TUTORIAL_OFF = 0,
    TUTORIAL_LEVEL_1_PICK_UP_PEASHOOTER = 1,
    TUTORIAL_LEVEL_1_PLANT_PEASHOOTER = 2,
    TUTORIAL_LEVEL_1_REFRESH_PEASHOOTER = 3,
    TUTORIAL_LEVEL_1_COMPLETED = 4,
    TUTORIAL_LEVEL_2_PICK_UP_SUNFLOWER = 5,
    TUTORIAL_LEVEL_2_PLANT_SUNFLOWER = 6,
    TUTORIAL_LEVEL_2_REFRESH_SUNFLOWER = 7,
    TUTORIAL_LEVEL_2_COMPLETED = 8,
    TUTORIAL_MORESUN_PICK_UP_SUNFLOWER = 9,
    TUTORIAL_MORESUN_PLANT_SUNFLOWER = 10,
    TUTORIAL_MORESUN_REFRESH_SUNFLOWER = 11,
    TUTORIAL_MORESUN_COMPLETED = 12,
    TUTORIAL_SLOT_MACHINE_PULL = 13,
    TUTORIAL_SLOT_MACHINE_COMPLETED = 14,
    TUTORIAL_SHOVEL_PICKUP = 15,
    TUTORIAL_SHOVEL_DIG = 16,
    TUTORIAL_SHOVEL_KEEP_DIGGING = 17,
    TUTORIAL_SHOVEL_COMPLETED = 18,
    TUTORIAL_ZOMBIQUARIUM_BUY_SNORKEL = 19,
    TUTORIAL_ZOMBIQUARIUM_BOUGHT_SNORKEL = 20,
    TUTORIAL_ZOMBIQUARIUM_CLICK_TROPHY = 21,
    TUTORIAL_ZEN_GARDEN_PICKUP_WATER = 22,
    TUTORIAL_ZEN_GARDEN_WATER_PLANT = 23,
    TUTORIAL_ZEN_GARDEN_KEEP_WATERING = 24,
    TUTORIAL_ZEN_GARDEN_VISIT_STORE = 25,
    TUTORIAL_ZEN_GARDEN_FERTILIZE_PLANTS = 26,
    TUTORIAL_ZEN_GARDEN_COMPLETED = 27,
    TUTORIAL_WHACK_A_ZOMBIE_BEFORE_PICK_SEED = 28,
    TUTORIAL_WHACK_A_ZOMBIE_PICK_SEED = 29,
    TUTORIAL_WHACK_A_ZOMBIE_COMPLETED = 30
};
enum UnlockingState { UNLOCK_OFF, UNLOCK_SHAKING, UNLOCK_FADING };
enum ZombieHeight {
    HEIGHT_ZOMBIE_NORMAL = 0,
    HEIGHT_IN_TO_POOL = 1,
    HEIGHT_OUT_OF_POOL = 2,
    HEIGHT_DRAGGED_UNDER = 3,
    HEIGHT_UP_TO_HIGH_GROUND = 4,
    HEIGHT_DOWN_OFF_HIGH_GROUND = 5,
    HEIGHT_UP_LADDER = 6,
    HEIGHT_FALLING = 7,
    HEIGHT_IN_TO_CHIMNEY = 8,
    HEIGHT_GETTING_BUNGEE_DROPPED = 9,
    HEIGHT_ZOMBIQUARIUM = 10
};
enum ZombiePhase {
    PHASE_ZOMBIE_NORMAL,
    PHASE_ZOMBIE_DYING,
    PHASE_ZOMBIE_BURNED,
    PHASE_ZOMBIE_MOWERED,
    PHASE_BUNGEE_DIVING,
    PHASE_BUNGEE_DIVING_SCREAMING,
    PHASE_BUNGEE_AT_BOTTOM,
    PHASE_BUNGEE_GRABBING,
    PHASE_BUNGEE_RISING,
    PHASE_BUNGEE_HIT_OUCHY,
    PHASE_BUNGEE_CUTSCENE,
    PHASE_POLEVAULTER_PRE_VAULT,
    PHASE_POLEVAULTER_IN_VAULT,
    PHASE_POLEVAULTER_POST_VAULT,
    PHASE_RISING_FROM_GRAVE,
    PHASE_JACK_IN_THE_BOX_RUNNING,
    PHASE_JACK_IN_THE_BOX_POPPING,
    PHASE_BOBSLED_SLIDING,
    PHASE_BOBSLED_BOARDING,
    PHASE_BOBSLED_CRASHING,
    PHASE_POGO_BOUNCING,
    PHASE_POGO_HIGH_BOUNCE_1,
    PHASE_POGO_HIGH_BOUNCE_2,
    PHASE_POGO_HIGH_BOUNCE_3,
    PHASE_POGO_HIGH_BOUNCE_4,
    PHASE_POGO_HIGH_BOUNCE_5,
    PHASE_POGO_HIGH_BOUNCE_6,
    PHASE_POGO_FORWARD_BOUNCE_2,
    PHASE_POGO_FORWARD_BOUNCE_7,
    PHASE_NEWSPAPER_READING,
    PHASE_NEWSPAPER_MADDENING,
    PHASE_NEWSPAPER_MAD,
    PHASE_DIGGER_TUNNELING,
    PHASE_DIGGER_RISING,
    PHASE_DIGGER_TUNNELING_PAUSE_WITHOUT_AXE,
    PHASE_DIGGER_RISE_WITHOUT_AXE,
    PHASE_DIGGER_STUNNED,
    PHASE_DIGGER_WALKING,
    PHASE_DIGGER_WALKING_WITHOUT_AXE = 38,
    PHASE_DIGGER_CUTSCENE,
    PHASE_DANCER_DANCING_IN = 40,
    PHASE_DANCER_SNAPPING_FINGERS,
    PHASE_DANCER_SNAPPING_FINGERS_WITH_LIGHT,
    PHASE_DANCER_SNAPPING_FINGERS_HOLD,
    PHASE_DANCER_DANCING_LEFT,
    PHASE_DANCER_WALK_TO_RAISE,
    PHASE_DANCER_RAISE_LEFT_1,
    PHASE_DANCER_RAISE_RIGHT_1,
    PHASE_DANCER_RAISE_LEFT_2,
    PHASE_DANCER_RAISE_RIGHT_2,
    PHASE_DANCER_RISING,
    PHASE_DOLPHIN_WALKING,
    PHASE_DOLPHIN_INTO_POOL,
    PHASE_DOLPHIN_RIDING,
    PHASE_DOLPHIN_IN_JUMP,
    PHASE_DOLPHIN_WALKING_IN_POOL = 55,
    PHASE_DOLPHIN_WALKING_WITHOUT_DOLPHIN,
    PHASE_SNORKEL_WALKING,
    PHASE_SNORKEL_INTO_POOL,
    PHASE_SNORKEL_WALKING_IN_POOL = 59,
    PHASE_SNORKEL_UP_TO_EAT,
    PHASE_SNORKEL_EATING_IN_POOL,
    PHASE_SNORKEL_DOWN_FROM_EAT,
    PHASE_ZOMBIQUARIUM_ACCEL,
    PHASE_ZOMBIQUARIUM_DRIFT,
    PHASE_ZOMBIQUARIUM_BACK_AND_FORTH,
    PHASE_ZOMBIQUARIUM_BITE,
    PHASE_CATAPULT_LAUNCHING,
    PHASE_CATAPULT_RELOADING,
    PHASE_GARGANTUAR_THROWING,
    PHASE_GARGANTUAR_SMASHING,
    PHASE_IMP_GETTING_THROWN,
    PHASE_IMP_LANDING,
    PHASE_BALLOON_FLYING,
    PHASE_BALLOON_POPPING,
    PHASE_BALLOON_WALKING,
    PHASE_LADDER_CARRYING,
    PHASE_LADDER_PLACING,
    PHASE_BOSS_ENTER,
    PHASE_BOSS_IDLE,
    PHASE_BOSS_SPAWNING = 80,
    PHASE_BOSS_STOMPING,
    PHASE_BOSS_BUNGEES_ENTER,
    PHASE_BOSS_BUNGEES_DROP,
    PHASE_BOSS_BUNGEES_LEAVE = 84,
    PHASE_BOSS_DROP_RV,
    PHASE_BOSS_HEAD_ENTER,
    PHASE_BOSS_HEAD_IDLE_BEFORE_SPIT,
    PHASE_BOSS_HEAD_IDLE_AFTER_SPIT,
    PHASE_BOSS_HEAD_SPIT,
    PHASE_BOSS_HEAD_LEAVE,
    PHASE_YETI_RUNNING,
    PHASE_SQUASH_PRE_LAUNCH,
    PHASE_SQUASH_RISING,
    PHASE_SQUASH_FALLING,
    PHASE_SQUASH_DONE_FALLING
};
enum ZombieType {
    ZOMBIE_INVALID = -1,
    ZOMBIE_NORMAL = 0,
    ZOMBIE_FLAG = 1,
    ZOMBIE_TRAFFIC_CONE = 2,
    ZOMBIE_POLEVAULTER = 3,
    ZOMBIE_PAIL = 4,
    ZOMBIE_NEWSPAPER = 5,
    ZOMBIE_DOOR = 6,
    ZOMBIE_FOOTBALL = 7,
    ZOMBIE_DANCER = 8,
    ZOMBIE_BACKUP_DANCER = 9,
    ZOMBIE_DUCKY_TUBE = 10,
    ZOMBIE_SNORKEL = 11,
    ZOMBIE_ZAMBONI = 12,
    ZOMBIE_BOBSLED = 13,
    ZOMBIE_DOLPHIN_RIDER = 14,
    ZOMBIE_JACK_IN_THE_BOX = 15,
    ZOMBIE_BALLOON = 16,
    ZOMBIE_DIGGER = 17,
    ZOMBIE_POGO = 18,
    ZOMBIE_YETI = 19,
    ZOMBIE_BUNGEE = 20,
    ZOMBIE_LADDER = 21,
    ZOMBIE_CATAPULT = 22,
    ZOMBIE_GARGANTUAR = 23,
    ZOMBIE_IMP = 24,
    ZOMBIE_BOSS = 25,
    ZOMBIE_TRASH_BIN = 26,
    ZOMBIE_PEA_HEAD = 27,
    ZOMBIE_WALLNUT_HEAD = 28,
    ZOMBIE_JALAPENO_HEAD = 29,
    ZOMBIE_GATLING_HEAD = 30,
    ZOMBIE_SQUASH_HEAD = 31,
    ZOMBIE_TALLNUT_HEAD = 32,
    ZOMBIE_REDEYE_GARGANTUAR = 33,
    NUM_ZOMBIE_TYPES = 34,
    ZOMBIE_CACHED_POLEVAULTER_WITH_POLE = 35,
    NUM_CACHED_ZOMBIE_TYPES = 36
};

//////////////////////////////
enum AttachmentID { ATTACHMENTID_NULL };
enum CoinID { COINID_NULL };
enum ParticleID { PARTICLEID_NULL };
enum ParticleEmitterID { PARTICLEEMITTERID_NULL };
enum ParticleSystemID { PARTICLESYSTEMID_NULL };
enum PlantID { PLANTID_NULL };
enum ReanimationID { REANIMATIONID_NULL };
enum ZombieID { ZOMBIEID_NULL };


namespace TouchState {
enum TouchState {
    None = 0,
    SeedBank = 1,
    ShovelRect = 2,
    ButterRect = 3,
    Board = 4,
    BoardMovedFromSeedBank = 5,
    BoardMovedFromShovelRect = 6,
    BoardMovedFromButterRect = 7,
    ValidCobCannon = 8,
    UsefulSeedPacket = 9,
    Unused = 10,
    HeavyWeapon = 11,
    PickingSomething = 12,
    ZenGardenTools = 13,
    BoardMovedFromZenGardenTools = 14,
    ValidCobCannonSecond = 15,
};
}

namespace TouchPlayerIndex {
enum TouchPlayerIndex { None = -1, Player1 = 0, Player2 = 1 };
}


namespace AchievementId {
enum AchievementId {
    ACHIEVEMENT_HOME_SECURITY = 0,    // 完成冒险模式
    ACHIEVEMENT_MORTICULTURALIST = 1, // 收集全部49种植物
    ACHIEVEMENT_IMMORTAL = 2,         // 生存泳池无尽达到40波
    ACHIEVEMENT_SOILPLANTS = 3,       // 在一个关卡内种植10个豌豆射手
    ACHIEVEMENT_CLOSESHAVE = 4,       // 用完全部小推车过一关
    ACHIEVEMENT_CHOMP = 5,            // 只使用大嘴花、坚果墙、向日葵过一关
    ACHIEVEMENT_VERSUS = 6,           // 对战模式获得5连胜
    ACHIEVEMENT_GARG = 7,             // 打败巨人僵尸
    ACHIEVEMENT_COOP = 8,             // 通关结盟坚果保龄球关卡
    ACHIEVEMENT_SHOP = 9,             // 在戴夫商店消费25000元
    ACHIEVEMENT_EXPLODONATOR = 10,    // 使用一个樱桃炸弹消灭10只僵尸
    ACHIEVEMENT_TREE = 11,            // 让智慧树长到100英尺高
    MAX_ACHIEVEMENTS
};
}

enum MainMenuButtonId {
    START_ADVENTURE_BUTTON = 0,
    ADVENTURE_BUTTON = 1,
    MORE_WAYS_BUTTON = 2,
    HOUSE_BUTTON = 3,
    ACHIEVEMENTS_BUTTON = 4,
    HELP_AND_OPTIONS_BUTTON = 5,
    UNLOCK_BUTTON = 6,
    RETURN_TO_ARCADE_BUTTON = 7,
    MORE_BUTTON = 8,
    BACK_STONE_BUTTON = 9,
    VS_BUTTON = 10,
    VS_COOP_BUTTON = 11,
    MINI_GAMES_BUTTON = 12,
    SURVIVAL_BUTTON = 13,
    PUZZLE_BUTTON = 14,
    BACK_POT_BUTTON = 15,
    STORE_BUTTON = 16,
    ZEN_BUTTON = 17,
    ALMANAC_BUTTON = 18,
    MAIL_BUTTON = 19,
    HELP_BAR = 20,


    ACHIEVEMENTS_BACK_BUTTON = 21
};

enum MainMenuScene { MENUSCENE_MORE_WAYS, MENUSCENE_MAIN, MENUSCENE_EXTRA };


namespace SeedChooserTouchState {
enum SeedChooserTouchState { ViewLawnButton, SeedChooser, StoreButton, StartButton, AlmanacButton, None };
}

namespace StoreScreenTouchState {
enum StoreScreenTouchState { Prev, Next, Back, None };
}


enum FoleyType {
    FOLEY_SUN,
    FOLEY_SPLAT = 1,
    FOLEY_LAWNMOWER,
    FOLEY_THROW = 3,
    FOLEY_SPAWN_SUN,
    FOLEY_CHOMP,
    FOLEY_CHOMP_SOFT,
    FOLEY_PLANT = 7,
    FOLEY_USE_SHOVEL = 8,
    FOLEY_DROP,
    FOLEY_BLEEP,
    FOLEY_GROAN,
    FOLEY_BRAINS = 12,
    FOLEY_SUKHBIR = 13,
    FOLEY_JACKINTHEBOX = 14,
    FOLEY_ART_CHALLENGE = 15,
    FOLEY_ZAMBONI = 16,
    FOLEY_THUNDER = 17,
    FOLEY_FROZEN = 18,
    FOLEY_ZOMBIESPLASH = 19,
    FOLEY_BOWLINGIMPACT = 20,
    FOLEY_SQUISH = 21,
    FOLEY_TIRE_POP = 22,
    FOLEY_EXPLOSION = 23,
    FOLEY_SLURP = 24,
    FOLEY_LIMBS_POP = 25,
    FOLEY_POGO_ZOMBIE = 26,
    FOLEY_SNOW_PEA_SPARKLES = 27,
    FOLEY_ZOMBIE_FALLING = 28,
    FOLEY_PUFF = 29,
    FOLEY_FUME = 30,
    FOLEY_COIN = 31,
    FOLEY_KERNEL_SPLAT = 32,
    FOLEY_DIGGER = 33,
    FOLEY_JACK_SURPRISE = 34,
    FOLEY_VASE_BREAKING = 35,
    FOLEY_POOL_CLEANER = 36,
    FOLEY_BASKETBALL = 37,
    FOLEY_IGNITE = 38,
    FOLEY_FIREPEA = 39,
    FOLEY_THUMP = 40,
    FOLEY_SQUASH_HMM = 41,
    FOLEY_MAGNETSHROOM = 42,
    FOLEY_BUTTER = 43,
    FOLEY_BUNGEE_SCREAM = 44,
    FOLEY_BOSS_EXPLOSION_SMALL = 45,
    FOLEY_SHIELD_HIT = 46,
    FOLEY_SWING = 47,
    FOLEY_BONK = 48,
    FOLEY_RAIN = 49,
    FOLEY_DOLPHIN_BEFORE_JUMPING = 50,
    FOLEY_DOLPHIN_APPEARS = 51,
    FOLEY_PLANT_WATER = 52,
    FOLEY_ZOMBIE_ENTERING_WATER = 53,
    FOLEY_GRAVEBUSTERCHOMP = 54,
    FOLEY_CHERRYBOMB = 55,
    FOLEY_JALAPENO_IGNITE = 56,
    FOLEY_REVERSE_EXPLOSION = 57,
    FOLEY_PLASTIC_HIT = 58,
    FOLEY_WINMUSIC = 59,
    FOLEY_BALLOONINFLATE = 60,
    FOLEY_BIGCHOMP = 61,
    FOLEY_MELONIMPACT = 62,
    FOLEY_PLANTGROW = 63,
    FOLEY_SHOOP = 64,
    FOLEY_JUICY = 65,
    FOLEY_NEWSPAPER_RARRGH = 66,
    FOLEY_NEWSPAPER_RIP = 67,
    FOLEY_FLOOP = 68,
    FOLEY_COFFEE = 69,
    FOLEY_LOW_GROAN = 70,
    FOLEY_PRIZE = 71,
    FOLEY_YUCK = 72,
    FOLEY_UMBRELLA = 73,
    FOLEY_GRASSSTEP = 74,
    FOLEY_SHOVEL = 75,
    FOLEY_COB_LAUNCH = 76,
    FOLEY_WATERING = 77,
    FOLEY_POLEVAULT = 78,
    FOLEY_GRAVESTONE_RUMBLE = 79,
    FOLEY_DIRT_RISE = 80,
    FOLEY_FERTILIZER = 81,
    FOLEY_PORTAL = 82,
    FOLEY_WAKEUP = 83,
    FOLEY_BUGSPRAY = 84,
    FOLEY_SCREAM = 85,
    FOLEY_PAPER = 86,
    FOLEY_MONEYFALLS = 87,
    FOLEY_IMP = 88,
    FOLEY_HYDRAULIC_SHORT = 89,
    FOLEY_HYDRAULIC = 90,
    FOLEY_GARGANTUDEATH = 91,
    FOLEY_CERAMIC = 92,
    FOLEY_BOSS_BOULDER_ATTACK = 93,
    FOLEY_CHIME = 94,
    FOLEY_CRAZY_DAVE_SHORT = 95,
    FOLEY_CRAZY_DAVE_LONG = 96,
    FOLEY_CRAZY_DAVE_EXTRA_LONG = 97,
    FOLEY_CRAZY_DAVE_CRAZY = 98,
    FOLEY_PHONOGRAPH = 99,
    FOLEY_DANCER = 100,
    FOLEY_FINAL_FANFARE = 101,
    FOLEY_CRAZY_DAVE_SCREAM = 102,
    FOLEY_CRAZY_DAVE_SCREAM_2 = 103,
    NUM_FOLEY = 104,
    FOLEY_MENU_LEFT = 105,
    FOLEY_MENU_CENTRE = 106,
    FOLEY_MENU_RIGHT = 107
};


enum FilterEffect { FILTEREFFECT_NONE = -1, FILTEREFFECT_WASHED_OUT = 0, FILTEREFFECT_LESS_WASHED_OUT = 1, FILTEREFFECT_WHITE = 2, FILTEREFFECT_CUSTOM = 3, NUM_FILTEREFFECT };


namespace HouseType {
enum HouseType {
    Invalid = -1,
    BLUEPRINT_BLING = 0,
    BLUEPRINT_SCARY = 1,
    BLUEPRINT_TRAILER = 2,
    BLUEPRINT_FUTURE = 3,
    BLUEPRINT_CLOWN = 4,
};
}

namespace MusicTune {
enum MusicTune {
    None = -1,
    DayGrasswalk = 1,
    NightMoongrains = 2,
    PoolWaterygraves = 3,
    FogRigormormist = 4,
    RoofGrazetheroof = 5,
    ChooseYourSeeds = 6,
    TitleCrazyDaveMainTheme = 7,
    ZenGarden = 8,
    PuzzleCerebrawl = 9,
    MinigameLoonboon = 10,
    Conveyer = 11,
    FinalBossBrainiacManiac = 12,
    ZombiesOnYourLawn = 13,
    MusicTuneCount = 14
};
}

namespace MusicFile {
enum MusicFile {
    MUSIC_FILE_NONE = -1,
    MUSIC_FILE_MAIN_MUSIC = 1,
    MUSIC_FILE_DRUMS = 2,
    MUSIC_FILE_DRUMS_NIGHTMOONGRAINS = 3,
    MUSIC_FILE_HIHATS = 4,
    MUSIC_FILE_CREDITS_ZOMBIES_ON_YOUR_LAWN = 5,
    NUM_MUSIC_FILES = 6,
};
}
namespace MusicBurstState {
enum MusicBurstState {
    MUSIC_BURST_OFF = 0,
    MUSIC_BURST_STARTING = 1,
    MUSIC_BURST_ON = 2,
    MUSIC_BURST_FINISHING = 3,
};
}
namespace MusicDrumsState {
enum MusicDrumsState {
    MUSIC_DRUMS_OFF = 0,
    MUSIC_DRUMS_ON_QUEUED = 1,
    MUSIC_DRUMS_ON = 2,
    MUSIC_DRUMS_OFF_QUEUED = 3,
    MUSIC_DRUMS_FADING = 4,
};
}

namespace ResType {
enum ResType { ResType_Image, ResType_Sound, ResType_Font, ResType_Music, ResType_Reanim, ResType_Particle, ResType_Trail };
}


namespace PixelFormat {
enum PixelFormat {
    kPixelFormat_None = -1,
    kPixelFormat_Automatic,
    kPixelFormat_RGBA8888,
    kPixelFormat_RGBA4444,
    kPixelFormat_RGBA5551,
    kPixelFormat_RGB565,
    kPixelFormat_RGB888,
    kPixelFormat_L8,
    kPixelFormat_A8,
    kPixelFormat_LA88,
    kPixelFormat_RGB_PVRTC2,
    kPixelFormat_RGB_PVRTC4,
    kPixelFormat_RGBA_PVRTC2,
    kPixelFormat_RGBA_PVRTC4
};
}


namespace DrawMode {
enum DrawMode { DRAWMODE_NORMAL = 0, DRAWMODE_ADDITIVE = 1 };
}


typedef std::string SexyString;
#define _S(x) x

typedef SexyString::value_type SexyChar;

struct SexyRGBA {
    unsigned char b, g, r, a;
};
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
// typedef __int64 int64;


struct Color {
    int mRed;
    int mGreen;
    int mBlue;
    int mAlpha;
};

namespace Sexy {
template <class _T>
class TRect {
public:
    _T mX;
    _T mY;
    _T mWidth;
    _T mHeight;

    TRect(_T theX, _T theY, _T theWidth, _T theHeight)
        : mX(theX)
        , mY(theY)
        , mWidth(theWidth)
        , mHeight(theHeight) {}

    TRect(const TRect<_T> &theTRect)
        : mX(theTRect.mX)
        , mY(theTRect.mY)
        , mWidth(theTRect.mWidth)
        , mHeight(theTRect.mHeight) {}

    TRect()
        : mX(0)
        , mY(0)
        , mWidth(0)
        , mHeight(0) {}

    bool Contains(_T theX, _T theY) const { return ((theX >= mX) && (theX < mX + mWidth) && (theY >= mY) && (theY < mY + mHeight)); }

    //    bool					Contains(const TPoint<_T>& thePoint) const
    //    {
    //        return ((thePoint.mX >= mX) && (thePoint.mX < mX + mWidth) &&
    //                (thePoint.mY >= mY) && (thePoint.mY < mY + mHeight));
    //    }

    void Offset(_T theX, _T theY) {
        mX += theX;
        mY += theY;
    }

    //    void					Offset(const TPoint<_T>& thePoint)
    //    {
    //        mX += thePoint.mX;
    //        mY += thePoint.mY;
    //    }
};

typedef TRect<int> Rect;
typedef TRect<double> FRect;
} // namespace Sexy

#ifndef max
#define max(a, b) (((a) > (b)) ? (a) : (b))
#endif

#ifndef min
#define min(a, b) (((a) < (b)) ? (a) : (b))
#endif

struct MotionTrailFrame {
    float mPosX;
    float mPosY;
    float mAnimTime;
};


struct ChosenSeed {
    int mX;                     // 0
    int mY;                     // 1
    int mTimeStartMotion;       // 2
    int mTimeEndMotion;         // 3
    int mStartX;                // 4
    int mStartY;                // 5
    int mEndX;                  // 6
    int mEndY;                  // 7
    int mChosenPlayerIndex;     // 8
    SeedType mSeedType;         // 9
    ChosenSeedState mSeedState; // 10
    int mSeedIndexInBank;       // 11
    bool mRefreshing;           // 12
    int mRefreshCounter;        // 13
    SeedType mImitaterType;     // 14
    bool mCrazyDavePicked;      // 60
};

class Board;
class GamepadControls;
class PlayerInfo;
class PoolEffect;
class Reanimation;
class SeedChooserScreen;
class Music;
class Music2;

class SexyAppBase {
public:
    int *vTable;                            // 0
    int unkMem1[164];                       // 1 ~ 164
    int *mWidgetManager;                    // 165
    int unkMem2[70];                        // 166 ~ 235, musicinterface 193
    bool mLawnMouseMode;                    // 944
    int unkMem3[77];                        // 237 ~ 313
    int *mSoundManager;                     // 314
    int unkMem4[39];                        // 315 ~ 353
    int mNumLoadingThreadTasks;             // 354
    int mCompletedLoadingThreadTasks;       // 355
    int unkMem5[30];                        // 356 ~ 385
    bool mIs3DAcclerated;                   // 1544
    int unkMem6[SexyAppBasePartSize - 387]; // 387 ~ 525
    bool unkBool1;                          // 2104
    bool mGamePad1IsOn;                     // 2105
    int unkMem7[22];                        // 527 ~ 548
    bool unkBool2;                          // 2196
    bool mGamePad2IsOn;                     // 2197
    int unkMem8[2];                         // 550 ~ 551
}; // 115： 552 , 111： 553


struct FoleyParams {
    FoleyType mFoleyType;
    float mPitchRange;
    int *mSfxID[10];
    uint mFoleyFlags;
};

struct FoleyInstance {
    int *mInstance;
    int mRefCount;
    bool _paused;
    int mStartTime;
    int mPauseOffset;
};

struct FoleyTypeData {
    FoleyInstance mFoleyInstances[8];
    int mLastVariationPlayed;
};

class TodFoley {
public:
    FoleyTypeData mTypeData[110];
};


class ReanimatorCache;


struct FlagsMod {
public:
    int mAddFlags;
    int mRemoveFlags;
};

struct TodSmoothArray {
    int mItem;
    float mWeight;
    float mLastPicked;
    float mSecondLastPicked;
};

struct Insets {
public:
    int mLeft;
    int mTop;
    int mRight;
    int mBottom;
};

class LawnApp;

namespace Sexy {
// public:
class Image {
public:
    int *vTable;                      // 0
    int placeHolder[2];               // 1 ~ 2
    bool unkBool;                     // 12
    int unkMmWidthems1[2];            // 4 ~ 5
    int *stringUnk1;                  // 6
    int *stringUnk2;                  // 7
    int *stringUnk3;                  // 8
    int mWidth;                       // 9
    int mHeight;                      // 10
    int mPitch;                       // 11
    int mStride;                      // 12
    PixelFormat::PixelFormat mFormat; // 13
    int mPixelFormatHint;             // 14
    int mNumRows;                     // 15
    int mNumCols;                     // 16
    int *mAnimInfo;                   // 17
    int unk[6];                       // 18 ~ 23
    int mHorizonWrapMode;             // 24
    int mVertWrapMode;                // 25
    int mTag;                         // 26
    int unkMems3;                     // 27 ，实际上Sexy::Image就到这里，下面是MemoryImage的成员
    LawnApp *mApp;                    // 28
    int unkMems4;                     // 29
    unsigned int *mBits;              // 30
    int mBitsChangedCount;            // 31
    int unk1[4];                      // 32 ~ 35
    bool mUnkModeRelated;             // 144
    bool mUnkMode1;                   // 145
    bool mUnkMode2;                   // 146
    bool mUnkBool;                    // 147
    bool mVolatile;                   // 148
    int unk2[20];                     // 38 ~ 57
    // 大小58个整数
    int GetWidth() { return mWidth; };
    int GetHeight() { return mHeight; };
};

// public:
class Font {
public:
    int *vTable;
    int mAscent;
    int mAscentPadding;
    int mHeight;
    int mLineSpacingOffset;
};

// public:
class Graphics {
public:
    int *vTable;                  // 0
    Sexy::Image *mDestImage;      // 1
    float mTransX;                // 2
    float mTransY;                // 3
    float mScaleX;                // 4
    float mScaleY;                // 5
    float unk1[2];                // 6 ~ 7
    Rect mClipRect;               // 8 ~ 11
    int unk2[3];                  // 12 ~ 14
    Color mColorUnknown;          // 15 ~ 18
    Color mColor;                 // 19 ~ 22
    int *mFont;                   // 23
    DrawMode::DrawMode mDrawMode; // 24
    bool mColorizeImages;         // 100
    bool mFastStretch;            // 101
    bool unkbool1;                // 102
    bool mLinearBlend;            // 103
    bool unkbool2;                // 104
    bool mGlobalScale;            // 105
    bool mGlobalTrackDeviceState; // 106
    int *unkPushPopTramsform;     // 27
    int unkInt;                   // 28
    int m3D;                      // 29
    int unk3[6];                  // 30 ~ 35
}; // 大小36个整数

// public:
class WidgetContainer {
public:
    int *vTable;                  // 0
    int mWidgetsUnk[5];           // 1 ~ 5
    int *mWidgetManager;          // 6
    WidgetContainer *mParent;     // 7
    bool mUpdateIteratorModified; // 32
    int *mUpdateIterator;         // 9
    int mLastWMUpdateCount;       // 10
    int mUpdateCnt;               // 11
    int unkMember;                // 12
    int mX;                       // 13
    int mY;                       // 14
    int mWidth;                   // 15
    int mHeight;                  // 16
    bool mHasAlpha;               // 68
    bool mClip;                   // 69
    FlagsMod mWidgetFlagsMod;     // 18 ~ 19
    int mPriority;                // 20
    int mZOrder;                  // 21
    int unk[6];                   // 22 ~ 27
    int mWidgetId;                // 28
}; // 大小未知，目前认为是29个整数。反正Widget是64个整数，足够了。

class Widget : public WidgetContainer {
public:
    bool mVisible;               // 116
    bool mMouseVisible;          // 117
    bool mDisabled;              // 118
    bool mHasFocus;              // 119
    bool mIsDown;                // 120
    bool mIsOver;                // 121
    bool mHasTransparencies;     // 122
    int mColorsUnk[2];           // 32 ~ 33
    Insets mMouseInsets;         // 34 ~ 37
    bool mDoFinger;              // 152
    bool mWantsFocus;            // 153
    int unk1[11];                // 38 ~ 48
    Widget *mFocusLinks[4];      // 49 ~ 52 ，上下左右
    int unk2[2];                 // 53 ~ 54
    Widget *mFocusedChildWidget; // 55
    int unk3[4];                 // 56 ~ 59
    int *mAnimatorForState[4];   // 60 ~ 63
}; // 大小64个整数！

class Checkbox : public Widget {
public:
    int unknownMember[8];   // 64 ~ 71
    int *mListener;         // 72
    Image *mUncheckedImage; // 73
    Image *mCheckedImage;   // 74
    int mId;                // 75
    bool mChecked;          // 304
    Rect mCheckedRect;      // 77 ~ 80
    Rect mUncheckedRect;    // 81 ~ 84
    Color mOutlineColor;    // 85 ~ 88
    Color mBkgColor;        // 89 ~ 92
    Color mCheckColor;      // 93 ~ 96
}; // 大小97个整数


class SelectableWidget : public Widget {
public:
    Color mUnkColor;  // 64 ~ 67
    float unkMems[4]; // 68 ~ 71
}; // 大小72个整数

struct TextLayout {
    int unk[84];
}; // 大小84个整数

class ButtonWidget : public SelectableWidget {
public:
    int *mLabel;            // 72
    int *mStringUnk2;       // 73
    TextLayout mTextLayout; // 74 ~ 157
    int unkMem1[9];         // 158 ~ 166
    Insets mInsets;         // 167 ~ 170
    int unkMems2[2];        // 171 ~ 172
    Image *mButtonImage;    // 173
    Image *mOverImage;      // 174
    Image *mDownImage;      // 175
    Image *mDisabledImage;  // 176
    Rect mNormalRect;       // 177 ~ 180
    Rect mOverRect;         // 181 ~ 184
    Rect mDownRect;         // 185 ~ 188
    Rect mDisabledRect;     // 189 ~ 192
    bool unkBool1;          // 772
    bool mBtnNoDraw;        // 773
    bool unkBool2;          // 774
    int unkMems3[2];        // 194 ~ 195
    double mOverAlpha;      // 197 ~ 198
    int unkMems4[4];        // 198 ~ 201
    bool unkBool3;          // 808
    bool unkBool4;          // 809
    int unkMem2;            // 203
}; // 大小204个整数

class DialogButton : public ButtonWidget {
public:
    Image *mImage;   // 204
    int unkMems4[4]; // 205 ~ 208
    LawnApp *mApp;   // 209
}; // 大小210个整数

class GameButton : public DialogButton {
public:
    int unkMems4[2];                // 210  ~ 211
    bool unkBool5;                  // 848
    int unkMems5[2];                // 213 ~ 214
    Sexy::Image *mOverOverlayImage; // 215
    bool mDrawStoneButton;          // 864
    int unkMems6[13];               // 217 ~ 229
}; // 大小230个整数


class ScrollbarWidget : public Widget {
public:
    int unkMem;             // 64
    Widget *mUpButton;      // 65
    Widget *mDownButton;    // 66
    bool mInvisIfNoScroll;  // 268
    int mId;                // 68
    double mValue;          // 69 ~ 70
    double mMaxValue;       // 71 ~ 72
    double mPageSize;       // 73 ~ 74
    bool mHorizontal;       // 300
    int mButtonLength;      // 76
    bool mPressedOnThumb;   // 77
    int mMouseDownThumbPos; // 78
    int mMouseDownX;        // 79
    int mMouseDownY;        // 80
    int mUpdateMode;        // 81
    int mUpdateAcc;         // 82
    int mButtonAcc;         // 83
    int mLastMouseX;        // 84
    int mLastMouseY;        // 85
    int *mScrollListener;   // 86
    Image *mThumbImage;     // 87
    Image *mBarImage;       // 88
    Image *mPagingImage;    // 89
}; // 大小90个整数

class CustomScrollbarWidget : public ScrollbarWidget {
    // 没有新增任何成员，6，这个类不知道什么意义
}; // 大小90个整数


class MemoryImage : public Image {}; // 大小58个整数

class SexyMatrix3 {
public:
    union {
        float m[3][3];
        struct {
            float m00, m01, m02;
            float m10, m11, m12;
            float m20, m21, m22;
        };
    };
};

struct ButtonListenerVTable {
    void *Delete;
    void *Delete2;
    void *ButtonPress;
    void *ButtonPress2;
    void *ButtonDepress;
    void *ButtonDownTick;
    void *ButtonMouseEnter;
    void *ButtonMouseLeave;
    void *ButtonMouseMove;
};

struct ButtonListener {
    ButtonListenerVTable *vTable;
};

class MenuWidget : public Widget {
public:
    Sexy::ButtonListener mButtonListener; // 64
    bool mIsFading;                       // 260
    bool unkBool2;                        // 261
    int *mMenuParser;                     // 66
    int *mSourceFileName;                 // 67
    int unkInt1;                          // 68
    Sexy::Image *mImage;                  // 69
}; // 大小70个整数

class Dialog : public Widget {
public:
    Sexy::ButtonListener mButtonListener; // 64
    int *mDialogListener;                 // 65
    Image *mComponentImage;               // 66
    DialogButton *mYesButton;             // 67
    DialogButton *mNoButton;              // 68
    int mNumButtons;                      // 69
    int *mDialogHeader;                   // 70
    int *mDialogFooter;                   // 71
    int *mDialogLines;                    // 72
    int *mUnkText;                        // 73
    TextLayout mTextLayout;               // 74 ~ 157
    int unk1[3];                          // 158 ~ 160
    int mButtonMode;                      // 161
    int *mHeaderFont;                     // 162
    int *mLinesFont;                      // 163
    int mTextAlign;                       // 164
    int mLineSpacingOffset;               // 165
    int mButtonHeight;                    // 166
    Insets mBackgroundInsets;             // 167 ~ 170
    Insets mContentInsets;                // 171 ~ 174
    int mSpaceAfterHeader;                // 175
    bool mDragging;                       // 176
    int mDragMouseX;                      // 177
    int mDragMouseY;                      // 178
    int mId;                              // 179
    bool mIsModal;                        // 180
    int mResult;                          // 181
    int mButtonHorzSpacing;               // 182
    int mButtonSidePadding;               // 183
}; // 大小184个整数

enum KeyCode { Invalid = -1, Ok = 13, Back = 27, Back2 = 305, Left = 37, Up = 38, Right = 39, Down = 40, Shovel = 49, Hammer = 50 };

class WidgetAnimator {
public:
    int *vTable;            // 0
    int unk[2];             // 1 ~ 2
    Widget *mWidget;        // 3
    int mUpdateCounter;     // 4
    bool mHideOnCompletion; // 20
};
}; // namespace Sexy

class ReanimTrackWidgetAnimator : public Sexy::WidgetAnimator {
public:
    LawnApp *mApp;                 // 6
    Sexy::Widget *mLawnMenuWidget; // 7
    int *mTrackName1;              // 8
    int *mTrackName2;              // 9
    int *mTrackName3;              // 10
    int unk2[2];                   // 11 ~ 12
};

class CreditScreen;

class MainMenu;

class ChallengeScreen;

class TitleScreen;

class EffectSystem;


struct SexyTransform2D : Sexy::SexyMatrix3 {};


class ChallengeScreen;


class ReanimatorTrackInstance;

class ReanimatorTransform;

class ReanimatorDefinition;


class GameObject {
public:
    int *vTable;        // 0
    int placeHolder[3]; // 1 ~ 3
    LawnApp *mApp;      // 4
    Board *mBoard;      // 5
    int mX;             // 6
    int mY;             // 7
    int mWidth;         // 8
    int mHeight;        // 9
    bool mVisible;      // 40
    int mRow;           // 11
    int mRenderOrder;   // 12
}; // 大小13个整数

class SeedPacket;
class SeedBank;
class Plant;
class Zombie;
class Coin;


class CursorObject : public GameObject {
public:
    int mSeedBankIndex;        // 13
    SeedType mType;            // 14
    SeedType mImitaterType;    // 15
    CursorType mCursorType;    // 16
    Coin *mCoinID;             // 17
    Plant *mGlovePlantID;      // 18
    Plant *mDuplicatorPlantID; // 19
    Plant *mCobCannonPlantID;  // 20
    int mHammerDownCounter;    // 21
    int mReanimCursorID;       // 22
}; // 大小23个整数


class CursorPreview : public GameObject {
public:
    int mGridX;      // 13
    int mGridY;      // 14
    int playerIndex; // 15
}; // 大小16个整数

struct ShopSeedPacket {
    int unknown[21];
}; // 大小21个整数


class MessageWidget;

class Challenge;

struct PlantRbTree {
    int unk[6];
};


class BaseGamepadControls {
public:
    int *mVtable;                    // 0
    GameObject mGameObject;          // 1 ~ 13
    Board *mBoard;                   // 14
    SeedBank *mSeedBank;             // 15
    float mUnkFirstHighlightRelated; // 16
    int mShovelRelated1;             // 17
    float mGamepadAccLeftX;
    float mGamepadAccLeftY;
    float mGridCenterPositionX;    // 20
    float mGridCenterPositionY;    // 21
    float mRightPositionX;         // 22
    float mRightPositionY;         // 23
    int mGamepadState;             // 24
    int unk1;                      // 25
    float mDigIndicatorPercentage; // 26 , 每按下一次铲除键就加2.3
    float mCursorPositionX;        // 27
    float mCursorPositionY;        // 28
    float mGamepadVelocityLeftX;   // 29
    float mGamepadVelocityLeftY;   // 30
    float mGamepadVelocityRightX;  // 31
    float mGamepadVelocityRightY;  // 32
    int unk2[4];                   // 33 ~ 36
    int mPlayerIndex1;             // 37
    int mPlayerIndex2;             // 38
    float mCursorPositionYJitter;  // 39
    float mUpdateAdd0Dot016;       // 40
    int unkMems[2];                // 41 ~ 42
    // 大小43个整数
public:
    void GetGamepadVelocity(float *horizontal, float *vertical);
};


struct GameStats {

    enum MiscStat { ZOMBIES_KILLED = 0, PLANTS_KILLED = 1, MONEY = 2, TREE_HEIGHT = 4, ENDLESS_FLAGS = 5, MOWED_ZOMBIES = 6, STINKY_CHOCOLATES = 7 };

    HouseType::HouseType mHouseType; // 0
    int unk;                         // 1
    int mMiscStats[9];               // 2 ~ 10
    char mFavoritePlants[49];        // 44 ~ 92
    char mFavoriteZombies[47];       // 93 ~ 139
    float mSurvivalCompletion;       // 35
    float mMiniGameCompletion;       // 36
    float mPuzzleCompletion;         // 37
}; // 大小38个整数

struct PottedPlant {

    enum PottedPlantAge // Prefix: PLANTAGE
    {
        Sprout,
        Small,
        Medium,
        Full
    };

    enum GardenType // Prefix: GARDEN
    {
        Main,
        Mushroom,
        Wheelbarrow,
        Aquarium
    };

    enum FacingDirection // Prefix: FACING
    {
        Right,
        Left
    };

    enum PottedPlantNeed { None, Water, Fertilizer, Bugspray, Phonograph };

    SeedType mSeedType : 7;
    FacingDirection mFacing : 1;

    GardenType mWhichZenGarden : 2;
    int mY : 2;
    DrawVariation mDrawVariation : 4;

    int mX : 3;
    PottedPlantNeed mPlantNeed : 3;
    PottedPlantAge mPlantAge : 2;

    int mTimesFed : 3;
    int mFeedingsPerGrow : 3;
    int : 2;

    int mLastWateredTime;       // 1
    int mLastNeedFulfilledTime; // 2
    int mLastFertilizedTime;    // 3
    int mLastChocolateTime;     // 4
};

class PlayerInfo {
public:
    int *vTable;                // 0
    int unk1;                   // 1
    int *mProFileMgr;           // 2
    int unk2;                   // 3
    char *mName;                // 4
    int mUseSeq;                // 5
    int mId;                    // 6
    int mProfileId;             // 7
    int mFlags;                 // 8
    int mLevel;                 // 9
    int mCoins;                 // 10
    int mChallengeRecords[100]; // 11 ~ 110 ， 但末尾6个完全不会用到，可以成为我的自己存数据的空间。
    int mPurchases[36];         // 111 ~ 146 ，本应该是mPurchases[80]，111 ~ 190，但仅用到了前36个。
    bool mAchievements[12];     // 147 ~ 149, 从mPurchases[80]分出来的
    bool mUnused[145];          // 150 ~
    bool mIsVibrateClosed;
    bool mZombatarEnabled;
    unsigned char mZombatarHat;
    unsigned char mZombatarHatColor;
    unsigned char mZombatarHair;
    unsigned char mZombatarHairColor;
    unsigned char mZombatarFacialHair;
    unsigned char mZombatarFacialHairColor;
    unsigned char mZombatarAccessory;
    unsigned char mZombatarAccessoryColor;
    unsigned char mZombatarEyeWear;
    unsigned char mZombatarEyeWearColor;
    unsigned char mZombatarTidBit;
    unsigned char mZombatarTidBitColor;
    bool mIs3DAcceleratedClosed;   // ~ 189, 从mPurchases[80]分出来的
    int mUsedCoins;                // 190, 从mPurchases[80]分出来的
    int unkMem4[2];                // 191 ~ 192
    int mLastStinkyChocolateTime;  // 193
    int mStinkyPosX;               // 194
    int mStinkyPosY;               // 195
    int mNumPottedPlants;          // 196
    int unk4;                      // 197
    PottedPlant mPottedPlants[50]; // 198 ~ 447
    double mMusicVolume;           // 448 ~ 449
    double mSoundVolume;           // 450 ~ 451
    int unkMems6[5];               // 452 ~ 456
    bool mHelpTextSeen[6];         // 1828 ~ 1833
    int unk5;                      // 459
    bool unkBool1;                 // 1840
    bool unkBool2;                 // 1841
    bool mPassedShopSeedTutorial;  // 1842
    bool mMailMessageRead[32];     // 1843 ~ 1874 ，紧密存放，可以存放32x8个bool
    bool mMailMessageSeen[32];     // 1875 ~ 1906 ，紧密存放，可以存放32x8个bool
    GameStats mGameStats;          // 477 ~ 514
    int unk6;                      // 515
}; // 大小516个整数

struct CausticEffect {
    bool mTextureAlpha[256][256];
};


struct SexyVertex2D {
    float x;
    float y;
    int unk1;
    int unk2;
    unsigned int color;
    int unk3;
    float u;
    float v;
};

struct TriVertex {
    float x;
    float y;
    float u;
    float v;
    unsigned int color;
};


class PoolEffect {
public:
    CausticEffect *mCausticGrayscaleImage; // 0
    Sexy::Image *mCausticImage;            // 1
    LawnApp *mApp;                         // 2
    int mPoolCounter;                      // 3
}; // 大小4个整数


class ProfileMgr {
public:
    int *vTable;                // 0
    int *mProfileEventListener; // 1
};

class DefaultProfileMgr : public ProfileMgr {
public:
    int *mProfileMap;    // 2
    int *mProfileMapEnd; // 3

    int mNumProfiles; // 7

    int mNextProfileUseSeq; // 9
};

class BaseRes {
public:
    int *vTable;            // 0
    ResType::ResType mType; // 1
    int *mResourceRef;      // 2
    int unk[8];             // 3 ~ 10
    char *mPath;            // 11
    int unk2[13];           // 12 ~ 24
}; // 大小25个整数

class SoundRes : public BaseRes {
public:
    int mSoundId;   // 25
    double mVolume; // 26 ~ 27
    int mPanning;   // 28
    int unk3;       // 29
}; // 大小30个整数

class MessageWidget {
public:
    int *vTable;                     // 0
    int unk[3];                      // 1 ~ 3
    LawnApp *mApp;                   // 4
    char mLabel[128];                // 5 ~ 36
    int mDisplayTime;                // 37
    int mDuration;                   // 38
    MessageStyle mMessageStyle;      // 39
    Reanimation *mTextReanimID[128]; // 40 ~ 167
    ReanimationType mReanimType;     // 168
    int mSlideOffTime;               // 169
    float unkFloatWithInitValue1;    // 170
    char mLabelNext[128];            // 171 ~ 202
    MessageStyle mMessageStyleNext;  // 203
}; // 大小204个整数

class CustomMessageWidget : public MessageWidget {
public:
    Sexy::Image *mIcon; // 204
}; // 大小205个整数

struct Curve1DUtil {
    int unk[16];
};


class AchievementsWidget : public Sexy::Widget {
public:
    Sexy::ButtonListener mButtonListener; // 64
    LawnApp *mApp;                        // 65
    int mMouseDownY;
    int mLastDownY;
    int mLastDownY1;
    long mLastTimeMs;
    long mLastTimeMs1;
    float mVelocity;
    float mAccY;
    bool mIsScrolling;
}; // 我想用AchievementsWidget取代MaskHelpWidget。MaskHelpWidget的大小是66个整数。

struct LeaderboardReanimations {
    Reanimation *backgroundReanim[5];
    Reanimation *achievementReanim[12];
};

class TrashBin : public Sexy::Widget {
public:
    enum TrashPileType { PLANT_PILE = 0, ZOMBIE_PILE = 1 };

    TrashPileType mTrashPileType; // 64
    float mTrashHeight;           // 65
    Sexy::Image *mPileImage[10];  // 66 ~ 75
    bool mMirrorPile[10];         // 76 ~ 78
    int mRandomPileWeight[6];     // 79 ~ 84
    int mPileNum;                 // 85
    // 大小86个整数

    TrashBin(TrashPileType theTrashPileType, float theHeight);
    void Create(TrashPileType theTrashPileType, float theHeight);
    void Draw(Sexy::Graphics *g);
};

class LeaderboardsWidget : public Sexy::Widget {
public:
    LawnApp *mApp;                                     // 64
    TrashBin *mZombieTrashBin;                         // 65
    TrashBin *mPlantTrashBin;                          // 66
    bool mAchievements[12];                            // 67 ~ 69
    LeaderboardReanimations *mLeaderboardReanimations; // 70
    int mLongestRecordPool;                            // 71
    Sexy::GameButton *mBackButton;
    Sexy::ButtonListener *mButtonListener;
    int mFocusedAchievementIndex;
    bool mHighLightAchievement;
}; // 我想用LeaderboardsWidget取代DaveHelp。

class ZombatarWidget : public Sexy::MenuWidget {
public:
    enum TabType { SKIN = 0, HAIR = 1, FHAIR = 2, TIDBIT = 3, EYEWEAR = 4, CLOTHES = 5, ACCESSORY = 6, HAT = 7, BACKGROUND = 8, MaxTabNum = 9 };

    enum AccessoryNum {
        HairNum = 16,
        FHairNum = 24,
        TidBitNum = 14,
        EyeWearNum = 16,
        ClothNum = 12,
        AccessoryNum = 15,
        HatNum = 14,
        BackgroundNum = 83,
    };

    Sexy::ButtonListener *mButtonListener;
    LawnApp *mApp;
    Zombie *mPreviewZombie;
    Sexy::GameButton *mBackButton;
    Sexy::GameButton *mFinishButton;
    Sexy::GameButton *mViewPortraitButton;
    Sexy::GameButton *mNewButton;
    Sexy::GameButton *mDeleteButton;
    Reanimation *mZombatarReanim;
    bool mShowExistingZombatarPortrait;
    bool mShowZombieTypeSelection;
    unsigned char mSelectedTab;
    unsigned char mSelectedSkinColor;
    unsigned char mSelectedHair;
    unsigned char mSelectedHairColor;
    unsigned char mSelectedFHair;
    unsigned char mSelectedFHairColor;
    unsigned char mSelectedFHairPage; // 0 or 1
    unsigned char mSelectedTidBit;
    unsigned char mSelectedTidBitColor;
    unsigned char mSelectedEyeWear;
    unsigned char mSelectedEyeWearColor;
    unsigned char mSelectedCloth;
    unsigned char mSelectedAccessory;
    unsigned char mSelectedAccessoryColor;
    unsigned char mSelectedHat;
    unsigned char mSelectedHatColor;
    unsigned char mSelectedBackground;
    unsigned char mSelectedBackgroundColor;
    unsigned char mSelectedBackgroundPage;

}; // 我想用ZombatarWidget取代TestMenuWidget。


struct ReanimatorTrack {
    int unk;
    char *mName;
    ReanimatorTransform *mTransforms;
    int mTransformCount;
    bool IsAttacher;
};

struct ReanimatorFrameTime {
    float mFraction;         // 0
    int mAnimFrameBeforeInt; // 1
    int mAnimFrameAfterInt;  // 2
};

class ReanimatorTransform {
public:
    float mTransX;        // 0
    float mTransY;        // 1
    float mSkewX;         // 2
    float mSkewY;         // 3
    float mScaleX;        // 4
    float mScaleY;        // 5
    float mFrame;         // 6
    float mAlpha;         // 7
    Sexy::Image *mImage;  // 8
    Sexy::Image *mImage2; // 9
    int *mFont;           // 10
    char *mName;          // 11
}; // 大小12个整数

class Attachment;

class ReanimatorTrackInstance {
public:
    int mBlendCounter;                   // 0
    int mBlendTime;                      // 1
    ReanimatorTransform mBlendTransform; // 2 ~ 13
    float mShakeOverride;                // 14
    float mShakeX;                       // 15
    float mShakeY;                       // 16
    unsigned short mAttachmentID;        // 17
    Sexy::Image *mImageOverride;         // 18
    int mRenderGroup;                    // 19
    Color mTrackColor;                   // 20 ~ 23
    bool mIgnoreClipRect;                // 96
    bool mTruncateDisappearingFrames;    // 97
    bool mIgnoreColorOverride;           // 98
    bool mIgnoreExtraAdditiveColor;      // 99
}; // 大小25个整数

class ReanimatorDefinition {
public:
    ReanimatorTrack *mTracks; // 0
    int mTrackCount;          // 1
    float mFPS;               // 2
    int *mReanimAtlas;        // 3
}; // 大小4个整数

class ReanimationParams {
public:
    ReanimationType mReanimationType;
    const char *mReanimFileName;
    int mReanimParamFlags;
};

class TodParticleSystem {
public:
    int *vTable;                // 0
    int unk1[3];                // 1 ~ 3
    ParticleEffect mEffectType; // 4
    int *mParticleDef;          // 5
    int *mParticleHolder;       // 6
    int mEmitterList[4];        // 7 ~ 10
    bool mDead;                 // 44
    bool mIsAttachment;         // 45
    int mRenderOrder;           // 12
    bool mDontUpdate;           // 52
    bool mActive;               // 53
    int mParticleId;            // 14
}; // 大小15个整数


struct AttachEffect {
    enum EffectType { Particle, Trail, Reanim, Attachment, Other };
    ReanimationID mEffectID;      // 0
    EffectType mEffectType;       // 1
    SexyTransform2D mOffset;      // 2 ~ 10
    bool mDontDrawIfParentHidden; // 44
    bool mDontPropogateColor;     // 45
}; // 大小12个整数

class Attachment {
public:
    int unk[4];                    // 0 ~ 3
    AttachEffect mEffectArray[16]; // 4 ~ 195
    int mNumEffects;               // 196
    bool mDead;                    //
    bool mActive;
    bool mUsesClipping;
    int mAttachmentID;
}; // 大小199个整数

struct ReanimCacheImageVariation {
    SeedType mSeedType;
    DrawVariation mDrawVariation;
    Sexy::Image *mImage;
};

struct TodListNode_ReanimCacheImageVariation {
    ReanimCacheImageVariation mValue;
    TodListNode_ReanimCacheImageVariation *mNext;
    TodListNode_ReanimCacheImageVariation *mPrev;
};

struct TodAllocator {
    void *mFreeList;
    void *mBlockList;
    int mGrowCount;
    int mTotalItems;
    int mItemSize;
};

struct TodList_ReanimCacheImageVariation {
    TodListNode_ReanimCacheImageVariation *mHead;
    TodListNode_ReanimCacheImageVariation *mTail;
    int mSize;
    TodAllocator *mpAllocator;
};

class ReanimatorCache {
public:
    TodList_ReanimCacheImageVariation mImageVariationList;
    Sexy::MemoryImage *mPlantImages[SeedType::NUM_SEED_TYPES];             // 4 ~ 57
    Sexy::MemoryImage *mLawnMowers[4];                                     // 58 ~ 61
    Sexy::MemoryImage *mZombieImages[ZombieType::NUM_CACHED_ZOMBIE_TYPES]; // 62 ~ 97
    LawnApp *mApp;                                                         // 98
    // 大小99个整数
public:
    void UpdateReanimationForVariation(Reanimation *theReanim, DrawVariation theDrawVariation);
    void LoadCachedImages();
    Sexy::Image *MakeCachedZombieFrame(ZombieType theZombieType);
};


struct PerfTimer {
    int unk[5];
};

class CreditScreen : public Sexy::Widget {
public:
    enum CreditsPhase {
        CREDITS_MAIN1 = 0,
        CREDITS_MAIN2 = 1,
        CREDITS_MAIN3 = 2,
        CREDITS_END = 3,
    };

public:
    Sexy::ButtonListener mButtonListener; // 64
    LawnApp *mApp;                        // 65
    CreditsPhase mCreditsPhase;           // 66
    int mCreditsPhaseCounter;             // 67
    int mCreditsReanimID;                 // 68
    int mFogParticleID;                   // 69
    int mBlinkCountdown;                  // 70
    Sexy::Widget *mOverlayWidget;         // 71
    bool mDrawBrain;                      // 288
    float mBrainPosX;                     // 73
    float mBrainPosY;                     // 74
    int mUpdateCount;                     // 75
    int mDrawCount;                       // 76
    int unkInt1;                          // 77
    PerfTimer mTimerSinceStart;           // 78 ~ 82
    int unkInt2;                          // 83
    bool mDontSync;                       // 336
    bool mCreditsPaused;                  // 337
    int unkInt3[3];                       // 85 ~ 87
    bool mPreloaded;                      // 352
    int unkInt4;                          // 89
    double mScrollPositionY1;             // 90 ~ 91
    double mScrollPositionY2;             // 92 ~ 93
    bool mIsFromMainMenu;                 // 376,即94

}; // 大小95个整数


class LawnDialog : public Sexy::Dialog {
public:
    LawnApp *mApp; // 184
#ifdef VERSION_111
    int mIsZombie;
#endif
    int mButtonDelay;                 // 185
    Sexy::Widget *mReanimationWidget; // 186
    bool mDrawStandardBack;           // 748
    Sexy::GameButton *mLawnYesButton; // 188
    Sexy::GameButton *mLawnNoButton;  // 189
    bool mTallBottom;                 // 760
    bool mVerticalCenterText;         // 761
    bool unkBool;                     // 762
#ifdef VERSION_111
    int unk2;
#endif
}; // 115: 191, 111: 193

namespace ImageLib {
class Image {
public:
    int *vTable;         // 0
    int mWidth;          // 1
    int mHeight;         // 2
    unsigned int *mBits; // 3
    int *mText1;         // 4
    int *mText2;         // 5
    bool unkBool;        // 24
    int unk1[256];       // 7 ~ 262
    int unkInt;          // 263
}; // 264个整数
} // namespace ImageLib

class TodParticleHolder {};
class TrailHolder {};


class AttachmentHolder {};

class ReanimationHolder;

class EffectSystem {
public:
    TodParticleHolder *mParticleHolder;
    TrailHolder *mTrailHolder;
    ReanimationHolder *mReanimationHolder;
    AttachmentHolder *mAttachmentHolder;
};


namespace Native {
class NativeApp;

class BridgeApp {
public:
    int *mVtable;
    NativeApp *mNativeApp;
};

class AudioOutput {
public:
    Native::NativeApp *mNativeApp;
    JNIEnv *mEnv;
    bool mUnkBool;
};
} // namespace Native

struct TodWeightedGridArray {
    int mX;
    int mY;
    int mWeight;
};

class TodTriVertex {
public:
    float x;
    float y;
    float u;
    float v;
    unsigned long color;
};

#define MAX_TRIANGLES 256

class TodTriangleGroup {
public:
    Sexy::Image *mImage;
    TriVertex mVertArray[MAX_TRIANGLES][3];
    int mTriangleCount;
    int mDrawMode;

    //    TodTriangleGroup();
    //    void                        DrawGroup(Sexy::Graphics* g);
    //    void                        AddTriangle(Sexy::Graphics* g, Sexy::Image* theImage, const SexyMatrix3& theMatrix, const Rect& theClipRect, const Color& theColor, int theDrawMode, const Rect&
    //    theSrcRect);
};
#endif // PVZ_ENUMS_H
